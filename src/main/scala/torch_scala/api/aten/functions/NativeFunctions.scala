
package torch_scala.api.aten.functions

import java.nio.LongBuffer
import java.nio.DoubleBuffer
import org.bytedeco.javacpp._
import org.bytedeco.javacpp.annotation._
import annotations._
import torch_scala.api.aten._
import torch_scala.api.std._
import torch_scala.{NativeLoader, Torch}
import scala.reflect.ClassTag

@Platform(include = Array( "ATen/NativeFunctions.h", "adapters/OptionalAdapter.h", "adapters/StdArrayAdapter.h" ))
@NoOffset object NativeFunctions {
     
	@native @Namespace("at::native") @ByVal def _cast_Byte[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Byte[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Char[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Char[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Double[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Double[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Float[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Float[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Int[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Int[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Long[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Long[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Short[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Short[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Half[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cast_Half[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef gradient: Tensor[T, TT], @Cast(Array("bool*")) @C10Optional retain_graph: BoolPointer, @Cast(Array("bool")) create_graph: Boolean): Unit
	@native @Namespace("at::native") def backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Unit
	@native @Namespace("at::native") def backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef gradient: Tensor[T, TT], @Cast(Array("bool*")) @C10Optional retain_graph: Array[Boolean], @Cast(Array("bool")) create_graph: Boolean): Unit
	@native @Namespace("at::native") def set_data[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef new_data: Tensor[T, TT]): Unit
	@native @Namespace("at::native") @ByVal def data[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def is_leaf[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @Cast(Array("int64_t")) def output_nr[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): CLongPointer
	@native @Namespace("at::native") @Cast(Array("int64_t")) def _version[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): CLongPointer
	@native @Namespace("at::native") @ByRef def requires_grad_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("bool")) requires_grad: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def requires_grad_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def retain_grad[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Unit
	@native @Namespace("at::native") @ByVal def align_as[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def align_tensors[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def _use_cudnn_ctc_loss[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Cast(Array("int64_t")) blank: CLongPointer): Boolean
	@native @Namespace("at::native") @ByVal def _cudnn_ctc_loss[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Cast(Array("int64_t")) blank: CLongPointer, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) zero_infinity: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def _use_cudnn_rnn_flatten_weight(): Boolean
	@native @Namespace("at::native") @ByVal def _cudnn_rnn_flatten_weight[T, TT <: TensorType](@ByVal weight_arr: TensorList[T, TT], @Cast(Array("int64_t")) weight_stride0: CLongPointer, @Cast(Array("int64_t")) input_size: CLongPointer, @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("int64_t")) hidden_size: CLongPointer, @Cast(Array("int64_t")) num_layers: CLongPointer, @Cast(Array("bool")) batch_first: Boolean, @Cast(Array("bool")) bidirectional: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cudnn_rnn[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal weight: TensorList[T, TT], @Cast(Array("int64_t")) weight_stride0: CLongPointer, @Const @ByRef weight_buf: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT], @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("int64_t")) hidden_size: CLongPointer, @Cast(Array("int64_t")) num_layers: CLongPointer, @Cast(Array("bool")) batch_first: Boolean, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @ByVal batch_sizes: IntArrayRef, @Const @ByRef dropout_state: Tensor[T, TT]): TensorTuple5[T,TT]
	@native @Namespace("at::native") @ByVal def _cudnn_rnn_backward[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal weight: TensorList[T, TT], @Cast(Array("int64_t")) weight_stride0: CLongPointer, @Const @ByRef weight_buf: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef grad_hy: Tensor[T, TT], @Const @ByRef grad_cy: Tensor[T, TT], @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("int64_t")) hidden_size: CLongPointer, @Cast(Array("int64_t")) num_layers: CLongPointer, @Cast(Array("bool")) batch_first: Boolean, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @ByVal batch_sizes: IntArrayRef, @Const @ByRef dropout_state: Tensor[T, TT], @Const @ByRef reserve: Tensor[T, TT], @ByVal output_mask: ArrayBool4): TensorTripleAndVector[T,TT]
	@native @Namespace("at::native") @ByVal def _cudnn_init_dropout_state[T, TT <: TensorType](dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("int64_t")) dropout_seed: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fused_dropout_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], p: Double, @C10Optional generator: Generator): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def fused_dropout_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], p: Double): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def masked_scale_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], scale: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sobol_engine_draw[T, TT <: TensorType](@Const @ByRef quasi: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer, @Const @ByRef sobolstate: Tensor[T, TT], @Cast(Array("int64_t")) dimension: CLongPointer, @Cast(Array("int64_t")) num_generated: CLongPointer, @C10Optional dtype: ScalarType): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def _sobol_engine_ff_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer, @Const @ByRef sobolstate: Tensor[T, TT], @Cast(Array("int64_t")) dimension: CLongPointer, @Cast(Array("int64_t")) num_generated: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sobol_engine_scramble_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef ltm: Tensor[T, TT], @Cast(Array("int64_t")) dimension: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sobol_engine_initialize_state_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dimension: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _reshape_from_tensor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef shape: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _shape_as_tensor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dropout[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def dropout_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def feature_dropout[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def feature_dropout_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def alpha_dropout[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def alpha_dropout_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def feature_alpha_dropout[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def feature_alpha_dropout_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], p: Double, @Cast(Array("bool")) train: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def abs[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def abs_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def abs_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def absolute[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def absolute_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def absolute_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def angle[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def angle_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def view_as_real[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def view_as_complex[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sgn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sgn_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sgn_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def real[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def imag[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conj[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def conj_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _conj[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def acos[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def acos_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def acos_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arccos[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arccos_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arccos_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def add_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def add_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_add_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_add_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_out_sparse_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_out_sparse_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_out_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_out_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_add_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_add_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def add_relu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def add_relu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_relu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_relu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_relu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_relu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def add_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmv[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmv[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_impl_cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef self2: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_impl_cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef self2: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_impl_cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef self2: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmv_impl_cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef self2: Tensor[T, TT], @Const @ByRef mat: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addr[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef vec1: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addr[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef vec1: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addr_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef vec1: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addr_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef vec1: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addr_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef vec1: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addr_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef vec1: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def affine_grid_generator[T, TT <: TensorType](@Const @ByRef theta: Tensor[T, TT], @ByVal size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def affine_grid_generator_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def all[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def all[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def all_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def all_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def allclose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], rtol: Double, atol: Double, @Cast(Array("bool")) equal_nan: Boolean): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def allclose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByVal def any[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def any[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def any_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def any_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arange[T, TT <: TensorType](@ByVal end: Scalar[T], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arange[T](@ByVal end: Scalar[T]): Tensor[T, CPU]
	@native @Namespace("at::native") @ByVal def arange[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arange[T](@ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, CPU]
	@native @Namespace("at::native") @ByVal def arange[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @ByVal step: Scalar[T], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arange[T](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @ByVal step: Scalar[T]): Tensor[T, CPU]
	@native @Namespace("at::native") @ByRef def arange_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arange_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @ByVal step: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arange_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arange_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @ByVal step: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arange_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _dim_arange[T, TT <: TensorType](@Const @ByRef like: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argmin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def acosh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def acosh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def acosh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arccosh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arccosh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arccosh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def asinh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def asinh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def asinh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arcsinh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arcsinh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arcsinh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def atanh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def atanh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def atanh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arctanh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arctanh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arctanh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_tensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_tensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_tensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_tensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_qtensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_qtensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_qtensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def as_strided_qtensorimpl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def as_strided_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def as_strided_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def as_strided_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def as_strided_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Cast(Array("int64_t*")) @C10Optional storage_offset: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def asin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def asin_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def asin_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def asin_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def asin_out_sparse[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arcsin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arcsin_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arcsin_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def atan[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def atan_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def atan_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def arctan[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arctan_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def arctan_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def atleast_1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def atleast_2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def atleast_3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def baddbmm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def baddbmm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def baddbmm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def baddbmm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm__cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm__cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _baddbmm_mkl_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _baddbmm_mkl_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def baddbmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bartlett_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bartlett_window(@Cast(Array("int64_t")) window_length: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def bartlett_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bartlett_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def batch_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, momentum: Double, eps: Double, @Cast(Array("bool")) cudnn_enabled: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_batch_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef `var`: Tensor[T, TT], eps: Double, output_scale: Double, @Cast(Array("int64_t")) output_zero_point: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _batch_norm_impl_index[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, momentum: Double, eps: Double, @Cast(Array("bool")) cudnn_enabled: Boolean): TensorTuple4AndLong[T,TT]
	@native @Namespace("at::native") @ByVal def _batch_norm_impl_index_backward[T, TT <: TensorType](@Cast(Array("int64_t")) impl_index: CLongPointer, @Const @ByRef input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Const @ByRef save_mean: Tensor[T, TT], @Const @ByRef save_var_transform: Tensor[T, TT], @Cast(Array("bool")) train: Boolean, eps: Double, @ByVal output_mask: ArrayBool3, @Const @ByRef reservedSpace: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def bernoulli[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bernoulli[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bernoulli_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bernoulli_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bernoulli_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef p: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bernoulli_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef p: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bernoulli_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], p: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bernoulli_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bernoulli[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], p: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bernoulli[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], p: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bilinear[T, TT <: TensorType](@Const @ByRef input1: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def binary_cross_entropy_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_with_logits[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef pos_weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_with_logits[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_with_logits_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef pos_weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def binary_cross_entropy_with_logits_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _bincount_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weights: Tensor[T, TT], @Cast(Array("int64_t")) minlength: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _bincount_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _bincount_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weights: Tensor[T, TT], @Cast(Array("int64_t")) minlength: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _bincount_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bitwise_not[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_not_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_not_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logical_not[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_not_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_not_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logical_xor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_xor_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_xor_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logical_and[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_and_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_and_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logical_or[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_or_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logical_or_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def blackman_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def blackman_window(@Cast(Array("int64_t")) window_length: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def blackman_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def blackman_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def bmm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bmm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bmm_sparse_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bmm_sparse_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _bmm_sparse_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _bmm_sparse_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bmm_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bmm_out_sparse_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bmm_out_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _bmm_out_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _bmm_out_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def broadcast_tensors[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cat[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cat[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cat_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cat_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def block_diag[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ceil[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ceil_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ceil_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def chain_matmul[T, TT <: TensorType](@ByVal matrices: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unsafe_chunk[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) chunks: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unsafe_chunk[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) chunks: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def chunk[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) chunks: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def chunk[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) chunks: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clamp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional min: Scalar[T], @C10Optional max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clamp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clamp_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional min: Scalar[T], @C10Optional max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clamp_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @C10Optional min: Scalar[T], @C10Optional max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional min: Scalar[T], @C10Optional max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clamp_max[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_max_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_max_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clamp_min[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal min: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_min_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal min: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clamp_min_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal min: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clip[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional min: Scalar[T], @C10Optional max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clip[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clip_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @C10Optional min: Scalar[T], @C10Optional max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clip_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clip_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional min: Scalar[T], @C10Optional max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def clip_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def cudnn_is_acceptable[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByVal def complex[T, TT <: TensorType](@Const @ByRef real: Tensor[T, TT], @Const @ByRef imag: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def complex_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef real: Tensor[T, TT], @Const @ByRef imag: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def polar[T, TT <: TensorType](@Const @ByRef abs: Tensor[T, TT], @Const @ByRef angle: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def polar_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef abs: Tensor[T, TT], @Const @ByRef angle: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def constant_pad_nd[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal pad: IntArrayRef, @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def constant_pad_nd[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal pad: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def contiguous[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def contiguous[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def convolution[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) transposed: Boolean, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def convolution_overrideable[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) transposed: Boolean, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def convolution_backward_overrideable[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) transposed: Boolean, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _convolution[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) transposed: Boolean, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) cudnn_enabled: Boolean, @Cast(Array("bool")) allow_tf32: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _convolution[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) transposed: Boolean, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) cudnn_enabled: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _convolution_nogroup[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) transposed: Boolean, @ByVal output_padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _convolution_double_backward[T, TT <: TensorType](@Const @ByRef ggI: Tensor[T, TT], @Const @ByRef ggW: Tensor[T, TT], @Const @ByRef ggb: Tensor[T, TT], @Const @ByRef gO: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) transposed: Boolean, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) cudnn_enabled: Boolean, @Cast(Array("bool")) allow_tf32: Boolean, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def conv1d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv1d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv2d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv2d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv3d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv3d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_tbc[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Cast(Array("int64_t")) pad: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_tbc[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_tbc_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Cast(Array("int64_t")) pad: CLongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def conv_transpose1d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_transpose1d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_transpose2d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_transpose2d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_transpose3d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def conv_transpose3d[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def copy_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef src: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def copy_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef src: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cos[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cos_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cos_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cosh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cosh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cosh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cosine_embedding_loss[T, TT <: TensorType](@Const @ByRef input1: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], margin: Double, @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cosine_embedding_loss[T, TT <: TensorType](@Const @ByRef input1: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def count_nonzero[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def count_nonzero[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def count_nonzero[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def count_nonzero[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def count_nonzero[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_affine_grid_generator_forward[T, TT <: TensorType](@Const @ByRef theta: Tensor[T, TT], @Cast(Array("int64_t")) N: CLongPointer, @Cast(Array("int64_t")) C: CLongPointer, @Cast(Array("int64_t")) H: CLongPointer, @Cast(Array("int64_t")) W: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_affine_grid_generator_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Cast(Array("int64_t")) N: CLongPointer, @Cast(Array("int64_t")) C: CLongPointer, @Cast(Array("int64_t")) H: CLongPointer, @Cast(Array("int64_t")) W: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_batch_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, exponential_average_factor: Double, epsilon: Double): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def cudnn_batch_norm_backward[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Const @ByRef save_mean: Tensor[T, TT], @Const @ByRef save_var: Tensor[T, TT], epsilon: Double, @Const @ByRef reserveSpace: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_deprecated[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_deprecated2[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_backward_input[T, TT <: TensorType](@ByVal self_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean, @ByVal output_mask: ArrayBool2): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_backward_weight[T, TT <: TensorType](@ByVal weight_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_transpose_deprecated[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_transpose_deprecated2[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_transpose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_transpose_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean, @ByVal output_mask: ArrayBool2): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_transpose_backward_input[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_convolution_transpose_backward_weight[T, TT <: TensorType](@ByVal weight_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @Cast(Array("bool")) allow_tf32: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_grid_sampler_forward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cudnn_grid_sampler_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def cummax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def cummax_out[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") def cummax_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) dim: CLongPointer): Unit
	@native @Namespace("at::native") def cummax_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) dim: CLongPointer): Unit
	@native @Namespace("at::native") @ByVal def cummin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def cummin_out[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") def cummin_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) dim: CLongPointer): Unit
	@native @Namespace("at::native") def cummin_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) dim: CLongPointer): Unit
	@native @Namespace("at::native") @ByVal def cummaxmin_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cumprod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cumprod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cumprod_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cumprod_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cumprod_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cumsum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cumsum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cumsum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cumsum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Cast(Array("int64_t")) blank: CLongPointer, @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("bool")) zero_infinity: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @Const @ByRef input_lengths: Tensor[T, TT], @Const @ByRef target_lengths: Tensor[T, TT], @Cast(Array("int64_t")) blank: CLongPointer, @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("bool")) zero_infinity: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @Const @ByRef input_lengths: Tensor[T, TT], @Const @ByRef target_lengths: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_cpu[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Cast(Array("int64_t")) blank: CLongPointer, @Cast(Array("bool")) zero_infinity: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_cpu[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_gpu[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Cast(Array("int64_t")) blank: CLongPointer, @Cast(Array("bool")) zero_infinity: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_gpu[T, TT <: TensorType](@Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_backward_cpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Const @ByRef neg_log_likelihood: Tensor[T, TT], @Const @ByRef log_alpha: Tensor[T, TT], @Cast(Array("int64_t")) blank: CLongPointer, @Cast(Array("bool")) zero_infinity: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_backward_cpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Const @ByRef neg_log_likelihood: Tensor[T, TT], @Const @ByRef log_alpha: Tensor[T, TT], @Cast(Array("int64_t")) blank: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_backward_gpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Const @ByRef neg_log_likelihood: Tensor[T, TT], @Const @ByRef log_alpha: Tensor[T, TT], @Cast(Array("int64_t")) blank: CLongPointer, @Cast(Array("bool")) zero_infinity: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ctc_loss_backward_gpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef log_probs: Tensor[T, TT], @Const @ByRef targets: Tensor[T, TT], @ByVal input_lengths: IntArrayRef, @ByVal target_lengths: IntArrayRef, @Const @ByRef neg_log_likelihood: Tensor[T, TT], @Const @ByRef log_alpha: Tensor[T, TT], @Cast(Array("int64_t")) blank: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diag_embed[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) offset: CLongPointer, @Cast(Array("int64_t")) dim1: CLongPointer, @Cast(Array("int64_t")) dim2: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diag_embed[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diagflat[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) offset: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diagflat[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diagonal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) offset: CLongPointer, @Cast(Array("int64_t")) dim1: CLongPointer, @Cast(Array("int64_t")) dim2: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diagonal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diagonal_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal input_sizes: IntArrayRef, @Cast(Array("int64_t")) offset: CLongPointer, @Cast(Array("int64_t")) dim1: CLongPointer, @Cast(Array("int64_t")) dim2: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fill_diagonal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal fill_value: Scalar[T], @Cast(Array("bool")) wrap: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fill_diagonal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal fill_value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def div[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def div_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def div_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def div_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def div_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def div_out_sparse_zerodim[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def div[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def div_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def divide[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def divide_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def divide_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def divide[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def divide_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def true_divide[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def true_divide_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def true_divide_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def true_divide[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def true_divide_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dot[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dot_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def dot_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def vdot[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def vdot_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def vdot_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def einsum[T, TT <: TensorType](@StdString equation: BytePointer, @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def einsum[T, TT <: TensorType](@StdString equation: String, @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def embedding[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) padding_idx: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("bool")) sparse: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def embedding[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def embedding_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("int64_t")) padding_idx: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("bool")) sparse: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def embedding_dense_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("int64_t")) padding_idx: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def embedding_dense_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("int64_t")) padding_idx: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def embedding_renorm_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], max_norm: Double, norm_type: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def embedding_renorm_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], max_norm: Double, norm_type: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def embedding_sparse_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("int64_t")) padding_idx: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_forward_only_cpu[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("bool")) sparse: Boolean, @Const @ByRef per_sample_weights: Tensor[T, TT], @Cast(Array("bool")) include_last_offset: Boolean): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_forward_only_cpu[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT]): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_forward_only_cuda[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("bool")) sparse: Boolean, @Const @ByRef per_sample_weights: Tensor[T, TT], @Cast(Array("bool")) include_last_offset: Boolean): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_forward_only_cuda[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT]): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def embedding_bag[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("bool")) sparse: Boolean, @Const @ByRef per_sample_weights: Tensor[T, TT], @Cast(Array("bool")) include_last_offset: Boolean): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def embedding_bag[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT]): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_cpu[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("bool")) sparse: Boolean, @Const @ByRef per_sample_weights: Tensor[T, TT], @Cast(Array("bool")) include_last_offset: Boolean): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_cpu[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT]): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_cuda[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("bool")) sparse: Boolean, @Const @ByRef per_sample_weights: Tensor[T, TT], @Cast(Array("bool")) include_last_offset: Boolean): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_cuda[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT]): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Const @ByRef offset2bag: Tensor[T, TT], @Const @ByRef bag_size: Tensor[T, TT], @Const @ByRef maximum_indices: Tensor[Long, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("bool")) sparse: Boolean, @Const @ByRef per_sample_weights: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_sparse_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Const @ByRef offset2bag: Tensor[T, TT], @Const @ByRef bag_size: Tensor[T, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Const @ByRef per_sample_weights: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_dense_backward_cpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Const @ByRef offset2bag: Tensor[T, TT], @Const @ByRef bag_size: Tensor[T, TT], @Const @ByRef maximum_indices: Tensor[Long, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Const @ByRef per_sample_weights: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_dense_backward_cuda[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Const @ByRef offset2bag: Tensor[T, TT], @Const @ByRef bag_size: Tensor[T, TT], @Const @ByRef maximum_indices: Tensor[Long, TT], @Cast(Array("int64_t")) num_weights: CLongPointer, @Cast(Array("bool")) scale_grad_by_freq: Boolean, @Cast(Array("int64_t")) mode: CLongPointer, @Const @ByRef per_sample_weights: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_per_sample_weights_backward_cpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Const @ByRef offset2bag: Tensor[T, TT], @Cast(Array("int64_t")) mode: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _embedding_bag_per_sample_weights_backward_cuda[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef offsets: Tensor[T, TT], @Const @ByRef offset2bag: Tensor[T, TT], @Cast(Array("int64_t")) mode: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_meta[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_meta(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def empty_cpu[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_cpu(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def empty_cuda[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_cuda(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def empty_mkldnn[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_mkldnn(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def empty_sparse[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_sparse(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def new_empty[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def new_empty[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def new_full[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal fill_value: Scalar[T], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def new_full[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal fill_value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def new_zeros[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def new_zeros[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_affine_quantized_other_backends_stub[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT], scale: Double, @Cast(Array("int64_t")) zero_point: CLongPointer, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_affine_quantized_other_backends_stub(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def empty_affine_quantized[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT], scale: Double, @Cast(Array("int64_t")) zero_point: CLongPointer, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_affine_quantized(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def empty_per_channel_affine_quantized_other_backends_stub[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef scales: Tensor[T, TT], @Const @ByRef zero_points: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_per_channel_affine_quantized_other_backends_stub[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef scales: Tensor[T, TT], @Const @ByRef zero_points: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_per_channel_affine_quantized[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef scales: Tensor[T, TT], @Const @ByRef zero_points: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_per_channel_affine_quantized[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef scales: Tensor[T, TT], @Const @ByRef zero_points: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def resize_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def resize_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def resize_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def resize_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantized_resize_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantized_resize_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_quantized[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef qtensor: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def empty_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def empty_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_strided_cpu[T, TT <: TensorType](@ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_strided_cpu(@ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def empty_strided_cuda[T, TT <: TensorType](@ByVal size: IntArrayRef, @ByVal stride: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def empty_strided_cuda(@ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def erf[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def erf_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def erf_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def erfc[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def erfc_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def erfc_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def exp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def exp_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def exp_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def exp2[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def exp2_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def exp2_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def expm1[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def expm1_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def expm1_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def expand[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @Cast(Array("bool")) implicite: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def expand[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def expand_as[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def eye[T, TT <: TensorType](@Cast(Array("int64_t")) n: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def eye(@Cast(Array("int64_t")) n: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def eye[T, TT <: TensorType](@Cast(Array("int64_t")) n: CLongPointer, @Cast(Array("int64_t")) m: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def eye(@Cast(Array("int64_t")) n: CLongPointer, @Cast(Array("int64_t")) m: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def eye_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eye_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eye_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer, @Cast(Array("int64_t")) m: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eye_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer, @Cast(Array("int64_t")) m: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def flatten[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) start_dim: CLongPointer, @Cast(Array("int64_t")) end_dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def flatten[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def unflatten[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @ByVal sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fill_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fill_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef value: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def floor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def floor_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def floor_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def floor_divide[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def floor_divide_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def floor_divide_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def floor_divide_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def floor_divide_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def floor_divide_out_sparse_zerodim[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def floor_divide[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def floor_divide_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def frac[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def frac_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def frac_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def full[T, TT <: TensorType](@ByVal size: IntArrayRef, @ByVal fill_value: Scalar[T], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def full[T](@ByVal size: IntArrayRef, @ByVal fill_value: Scalar[T]): Tensor[T, CPU]
	@native @Namespace("at::native") @ByRef def full_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef, @ByVal fill_value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def full_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal fill_value: Scalar[T], @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def full_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal fill_value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def from_file[T, TT <: TensorType](@StdString filename: BytePointer, @Cast(Array("bool*")) @C10Optional shared: BoolPointer, @Cast(Array("int64_t*")) @C10Optional size: LongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def from_file(@StdString filename: BytePointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def from_file[T, TT <: TensorType](@StdString filename: String, @Cast(Array("bool*")) @C10Optional shared: Array[Boolean], @Cast(Array("int64_t*")) @C10Optional size: LongBuffer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def from_file(@StdString filename: String): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def from_file[T, TT <: TensorType](@StdString filename: BytePointer, @Cast(Array("bool*")) @C10Optional shared: BoolPointer, @Cast(Array("int64_t*")) @C10Optional size: Array[Long], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def from_file[T, TT <: TensorType](@StdString filename: String, @Cast(Array("bool*")) @C10Optional shared: Array[Boolean], @Cast(Array("int64_t*")) @C10Optional size: LongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def from_file[T, TT <: TensorType](@StdString filename: BytePointer, @Cast(Array("bool*")) @C10Optional shared: BoolPointer, @Cast(Array("int64_t*")) @C10Optional size: LongBuffer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def from_file[T, TT <: TensorType](@StdString filename: String, @Cast(Array("bool*")) @C10Optional shared: Array[Boolean], @Cast(Array("int64_t*")) @C10Optional size: Array[Long], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gcd_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gcd[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gcd_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lcm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lcm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lcm_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def grid_sampler[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_2d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_2d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _grid_sampler_2d_cpu_fallback[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _grid_sampler_2d_cpu_fallback_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_3d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_3d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def grid_sampler_3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef grid: Tensor[T, TT], @Cast(Array("int64_t")) interpolation_mode: CLongPointer, @Cast(Array("int64_t")) padding_mode: CLongPointer, @Cast(Array("bool")) align_corners: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def hann_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hann_window(@Cast(Array("int64_t")) window_length: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def hann_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hann_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def hamming_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hamming_window(@Cast(Array("int64_t")) window_length: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def hamming_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hamming_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def hamming_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, alpha: Double, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hamming_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, alpha: Double): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def hamming_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, alpha: Double, beta: Double, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hamming_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, alpha: Double, beta: Double): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def kaiser_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kaiser_window(@Cast(Array("int64_t")) window_length: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def kaiser_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kaiser_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def kaiser_window[T, TT <: TensorType](@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, beta: Double, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kaiser_window(@Cast(Array("int64_t")) window_length: CLongPointer, @Cast(Array("bool")) periodic: Boolean, beta: Double): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def hinge_embedding_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], margin: Double, @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hinge_embedding_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def group_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Cast(Array("int64_t")) num_groups: CLongPointer, @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], eps: Double, @Cast(Array("bool")) cudnn_enabled: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def group_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Cast(Array("int64_t")) num_groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def native_group_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Cast(Array("int64_t")) N: CLongPointer, @Cast(Array("int64_t")) C: CLongPointer, @Cast(Array("int64_t")) HxW: CLongPointer, @Cast(Array("int64_t")) group: CLongPointer, eps: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def math_group_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Cast(Array("int64_t")) N: CLongPointer, @Cast(Array("int64_t")) C: CLongPointer, @Cast(Array("int64_t")) HxW: CLongPointer, @Cast(Array("int64_t")) group: CLongPointer, eps: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def native_group_norm_backward[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef rstd: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) N: CLongPointer, @Cast(Array("int64_t")) C: CLongPointer, @Cast(Array("int64_t")) HxW: CLongPointer, @Cast(Array("int64_t")) group: CLongPointer, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer, @Cast(Array("bool")) normalized: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool")) onesided: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool")) onesided: Boolean, @ByVal signal_sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _fft_with_size[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer, @Cast(Array("bool")) complex_input: Boolean, @Cast(Array("bool")) complex_output: Boolean, @Cast(Array("bool")) inverse: Boolean, @ByVal checked_signal_sizes: IntArrayRef, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool")) onesided: Boolean, @ByVal output_sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _fft_mkl[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer, @Cast(Array("bool")) complex_input: Boolean, @Cast(Array("bool")) complex_output: Boolean, @Cast(Array("bool")) inverse: Boolean, @ByVal checked_signal_sizes: IntArrayRef, @Cast(Array("int64_t")) normalization: CLongPointer, @Cast(Array("bool")) onesided: Boolean, @ByVal output_sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _fft_cufft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer, @Cast(Array("bool")) complex_input: Boolean, @Cast(Array("bool")) complex_output: Boolean, @Cast(Array("bool")) inverse: Boolean, @ByVal checked_signal_sizes: IntArrayRef, @Cast(Array("int64_t")) normalization: CLongPointer, @Cast(Array("bool")) onesided: Boolean, @ByVal output_sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") def _cufft_set_plan_cache_max_size(@Cast(Array("int64_t")) device_index: CLongPointer, @Cast(Array("int64_t")) max_size: CLongPointer): Unit
	@native @Namespace("at::native") def _cufft_clear_plan_cache(@Cast(Array("int64_t")) device_index: CLongPointer): Unit
	@native @Namespace("at::native") @ByVal def index[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal indices: TensorList[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_copy_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_copy[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_put_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal indices: TensorList[Long, TT], @Const @ByRef values: Tensor[T, TT], @Cast(Array("bool")) accumulate: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_put_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal indices: TensorList[Long, TT], @Const @ByRef values: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_put[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal indices: TensorList[Long, TT], @Const @ByRef values: Tensor[T, TT], @Cast(Array("bool")) accumulate: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_put[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal indices: TensorList[Long, TT], @Const @ByRef values: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _index_put_impl_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal indices: TensorList[Long, TT], @Const @ByRef values: Tensor[T, TT], @Cast(Array("bool")) accumulate: Boolean, @Cast(Array("bool")) unsafe: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _index_put_impl_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal indices: TensorList[Long, TT], @Const @ByRef values: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def instance_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) use_input_stats: Boolean, momentum: Double, eps: Double, @Cast(Array("bool")) cudnn_enabled: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def inverse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def inverse_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _inverse_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _inverse_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isclose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], rtol: Double, atol: Double, @Cast(Array("bool")) equal_nan: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isclose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isnan[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isnan_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def is_distributed[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def is_floating_point[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def is_complex[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByVal def isreal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def is_nonzero[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def is_same_size[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def is_signed[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByVal def kl_div[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("bool")) log_target: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kl_div[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kl_div_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("bool")) log_target: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kl_div_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kl_div_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("bool")) log_target: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kl_div_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def kthvalue[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def kthvalue[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def kthvalue_out_cpu[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def kthvalue_out_cpu[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def kthvalue_out_cuda[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def kthvalue_out_cuda[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def layer_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal normalized_shape: IntArrayRef, @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], eps: Double, @Cast(Array("bool")) cudnn_enable: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def layer_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal normalized_shape: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def layer_norm_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Cast(Array("int64_t")) M: CLongPointer, @Cast(Array("int64_t")) N: CLongPointer, eps: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def layer_norm_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Cast(Array("int64_t")) M: CLongPointer, @Cast(Array("int64_t")) N: CLongPointer, eps: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def layer_norm_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef rstd: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) M: CLongPointer, @Cast(Array("int64_t")) N: CLongPointer, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def layer_norm_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef rstd: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) M: CLongPointer, @Cast(Array("int64_t")) N: CLongPointer, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def linear[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linear[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_linear[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_linear[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fbgemm_linear_int8_weight_fp32_activation[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef packed: Tensor[T, TT], @Const @ByRef col_offsets: Tensor[T, TT], @ByVal weight_scale: Scalar[T], @ByVal weight_zero_point: Scalar[T], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fbgemm_linear_int8_weight[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef packed: Tensor[T, TT], @Const @ByRef col_offsets: Tensor[T, TT], @ByVal weight_scale: Scalar[T], @ByVal weight_zero_point: Scalar[T], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fbgemm_linear_quantize_weight[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT]): TensorTupleAndDoubleLong[T,TT]
	@native @Namespace("at::native") @ByVal def fbgemm_pack_gemm_matrix_fp16[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fbgemm_linear_fp16_weight_fp32_activation[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef packed_weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fbgemm_linear_fp16_weight[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef packed_weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fbgemm_pack_quantized_matrix[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fbgemm_pack_quantized_matrix[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Cast(Array("int64_t")) K: CLongPointer, @Cast(Array("int64_t")) N: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linspace[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linspace[T](@ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, CPU]
	@native @Namespace("at::native") @ByVal def linspace[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongBuffer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linspace[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: Array[Long], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log10[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log10_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log10_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log1p[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log1p_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log1p_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log1p_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log1p_out_sparse[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log2[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log2_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log2_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logaddexp_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logaddexp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logaddexp2_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logaddexp2[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logdet[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logspace[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongPointer, base: Double, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logspace[T](@ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, CPU]
	@native @Namespace("at::native") @ByVal def logspace[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongBuffer, base: Double, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logspace[T, TT <: TensorType](@ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: Array[Long], base: Double, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongPointer, base: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongBuffer, base: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: Array[Long], base: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongPointer, base: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: LongBuffer, base: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logspace_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @Cast(Array("int64_t*")) @C10Optional steps: Array[Long], base: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _logcumsumexp_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _logcumsumexp_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _logcumsumexp_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _logcumsumexp_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logcumsumexp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logcumsumexp_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logsumexp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logsumexp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logsumexp_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logsumexp_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def margin_ranking_loss[T, TT <: TensorType](@Const @ByRef input1: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], margin: Double, @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def margin_ranking_loss[T, TT <: TensorType](@Const @ByRef input1: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matmul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def matmul_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matrix_rank[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], tol: Double, @Cast(Array("bool")) symmetric: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matrix_rank[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], tol: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matrix_rank[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) symmetric: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matrix_rank[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matrix_power[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matrix_exp[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def matrix_exp_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grad: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _aminmax_all[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _aminmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _aminmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _compute_linear_combination[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef coefficients: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _compute_linear_combination_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef coefficients: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_out[T, TT <: TensorType](@ByRef max: Tensor[T, TT], @ByRef max_values: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_out[T, TT <: TensorType](@ByRef max: Tensor[T, TT], @ByRef max_values: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def value_selecting_reduction_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef indices: Tensor[Long, TT], @ByVal sizes: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def amax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def amax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def amax_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def amax_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_pool1d_with_indices[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool1d_with_indices[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_max_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_max_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_max_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_max_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_max_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_max_pool1d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_max_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_max_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_cpu_gpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_cpu_gpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_cpu_gpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_cpu_gpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mean_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mean_out_cpu_gpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mean_out_cpu_gpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mean_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mean_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def median[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def median[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def median_out[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def median_out[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def min[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def min[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def min_out[T, TT <: TensorType](@ByRef min: Tensor[T, TT], @ByRef min_indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def min_out[T, TT <: TensorType](@ByRef min: Tensor[T, TT], @ByRef min_indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def amin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def amin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def amin_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def amin_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_convolution[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_convolution_backward_input[T, TT <: TensorType](@ByVal self_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) bias_defined: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_convolution_backward_weights[T, TT <: TensorType](@ByVal weight_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) bias_defined: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def mkldnn_convolution_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def miopen_batch_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, exponential_average_factor: Double, epsilon: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def miopen_batch_norm_backward[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Const @ByRef save_mean: Tensor[T, TT], @Const @ByRef save_var: Tensor[T, TT], epsilon: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_backward_input[T, TT <: TensorType](@ByVal self_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_backward_bias[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_backward_weight[T, TT <: TensorType](@ByVal weight_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_transpose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_transpose_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_transpose_backward_input[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_convolution_transpose_backward_weight[T, TT <: TensorType](@ByVal weight_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_depthwise_convolution[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_depthwise_convolution_backward_input[T, TT <: TensorType](@ByVal self_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_depthwise_convolution_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def miopen_depthwise_convolution_backward_weight[T, TT <: TensorType](@ByVal weight_size: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer, @Cast(Array("bool")) benchmark: Boolean, @Cast(Array("bool")) deterministic: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def miopen_rnn[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal weight: TensorList[T, TT], @Cast(Array("int64_t")) weight_stride0: CLongPointer, @Const @ByRef hx: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT], @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("int64_t")) hidden_size: CLongPointer, @Cast(Array("int64_t")) num_layers: CLongPointer, @Cast(Array("bool")) batch_first: Boolean, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @ByVal batch_sizes: IntArrayRef, @Const @ByRef dropout_state: Tensor[T, TT]): TensorTuple5[T,TT]
	@native @Namespace("at::native") @ByVal def miopen_rnn_backward[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal weight: TensorList[T, TT], @Cast(Array("int64_t")) weight_stride0: CLongPointer, @Const @ByRef weight_buf: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef grad_hy: Tensor[T, TT], @Const @ByRef grad_cy: Tensor[T, TT], @Cast(Array("int64_t")) mode: CLongPointer, @Cast(Array("int64_t")) hidden_size: CLongPointer, @Cast(Array("int64_t")) num_layers: CLongPointer, @Cast(Array("bool")) batch_first: Boolean, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @ByVal batch_sizes: IntArrayRef, @Const @ByRef dropout_state: Tensor[T, TT], @Const @ByRef reserve: Tensor[T, TT], @ByVal output_mask: ArrayBool4): TensorTripleAndVector[T,TT]
	@native @Namespace("at::native") @ByVal def mm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_mm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mm_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sparse_mm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mode[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def mode[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def mode_out[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def mode_out[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def mul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mul_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_mul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mul_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mul_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_mul_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mul_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mul_out_sparse_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mul_out_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_mul_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mul_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multiply[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multiply_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multiply_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multiply[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multiply_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mv[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mv_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mv_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef vec: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mvlgamma[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) p: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mvlgamma_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) p: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def narrow_copy_dense[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) start: CLongPointer, @Cast(Array("int64_t")) length: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def narrow_copy_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) start: CLongPointer, @Cast(Array("int64_t")) length: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def narrow[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) start: CLongPointer, @Cast(Array("int64_t")) length: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def narrow[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef start: Tensor[T, TT], @Cast(Array("int64_t")) length: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def batch_norm_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, momentum: Double, eps: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, momentum: Double, eps: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def mkldnn_batch_norm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, momentum: Double, eps: Double): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef save_mean: Tensor[T, TT], @ByRef save_invstd: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Cast(Array("bool")) training: Boolean, momentum: Double, eps: Double): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_stats_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], eps: Double): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_elemt_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef invstd: Tensor[T, TT], eps: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def batch_norm_elemt_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef invstd: Tensor[T, TT], eps: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def batch_norm_gather_stats_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef invstd: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], momentum: Double, eps: Double, @Cast(Array("int64_t")) count: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_gather_stats_with_counts_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef invstd: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], momentum: Double, eps: Double, @Const @ByRef counts: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Const @ByRef save_mean: Tensor[T, TT], @Const @ByRef save_invstd: Tensor[T, TT], @Cast(Array("bool")) train: Boolean, eps: Double, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], @Const @ByRef save_mean: Tensor[T, TT], @Const @ByRef save_invstd: Tensor[T, TT], @Cast(Array("bool")) train: Boolean, eps: Double, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_backward_reduce_cuda[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef invstd: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("bool")) input_g: Boolean, @Cast(Array("bool")) weight_g: Boolean, @Cast(Array("bool")) bias_g: Boolean): TensorTuple4[T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_backward_elemt_cuda[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef invstd: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef mean_dy: Tensor[T, TT], @Const @ByRef mean_dy_xmu: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def batch_norm_update_stats_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], momentum: Double): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def batch_norm_update_stats_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef running_mean: Tensor[T, TT], @Const @ByRef running_var: Tensor[T, TT], momentum: Double): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def is_vulkan_available(): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def _nnpack_available(): Boolean
	@native @Namespace("at::native") @ByVal def _nnpack_spatial_convolution[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _nnpack_spatial_convolution[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Const @ByRef bias: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _nnpack_spatial_convolution_backward[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _nnpack_spatial_convolution_backward_input[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _nnpack_spatial_convolution_backward_weight[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal weightsize: IntArrayRef, @Const @ByRef grad_output: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ones[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ones(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def ones_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ones_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ones_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pairwise_distance[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, eps: Double, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pairwise_distance[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cdist[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, @Cast(Array("int64_t*")) @C10Optional compute_mode: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cdist[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cdist[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, @Cast(Array("int64_t*")) @C10Optional compute_mode: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cdist[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, @Cast(Array("int64_t*")) @C10Optional compute_mode: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _euclidean_dist[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cdist_forward[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, @Cast(Array("int64_t*")) @C10Optional compute_mode: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cdist_forward[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, @Cast(Array("int64_t*")) @C10Optional compute_mode: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cdist_forward[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, @Cast(Array("int64_t*")) @C10Optional compute_mode: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cdist_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], p: Double, @Const @ByRef cdist: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pdist[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], p: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pdist[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _pdist_forward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], p: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _pdist_forward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _pdist_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], p: Double, @Const @ByRef pdist: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cosine_similarity[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, eps: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cosine_similarity[T, TT <: TensorType](@Const @ByRef x1: Tensor[T, TT], @Const @ByRef x2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def permute[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dims: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def movedim[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal source: IntArrayRef, @ByVal destination: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def movedim[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) source: CLongPointer, @Cast(Array("int64_t")) destination: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def numpy_T[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pixel_shuffle[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) upscale_factor: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def channel_shuffle[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def channel_shuffle_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def is_pinned[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByVal def pin_memory[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pinverse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], rcond: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pinverse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def poisson_nll_loss[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("bool")) log_input: Boolean, @Cast(Array("bool")) full: Boolean, eps: Double, @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rad2deg[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rad2deg_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rad2deg_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def deg2rad[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def deg2rad_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def deg2rad_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def scalar_tensor[T, TT <: TensorType](@ByVal s: Scalar[T], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def scalar_tensor[T](@ByVal s: Scalar[T]): Tensor[T, CPU]
	@native @Namespace("at::native") @ByVal def rand[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rand(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def rand[T, TT <: TensorType](@ByVal size: IntArrayRef, @C10Optional generator: Generator, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rand(@ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def rand_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rand_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rand_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rand_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint[T, TT <: TensorType](@Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint(@Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def randint[T, TT <: TensorType](@Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @C10Optional generator: Generator, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint(@Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def randint[T, TT <: TensorType](@Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint(@Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def randint[T, TT <: TensorType](@Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @C10Optional generator: Generator, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint(@Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def randint_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def randint_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def randint_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def randint_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer, @ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) high: CLongPointer, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) high: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer, @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randint_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) low: CLongPointer, @Cast(Array("int64_t")) high: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randn[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randn(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def randn[T, TT <: TensorType](@ByVal size: IntArrayRef, @C10Optional generator: Generator, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randn(@ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def randn_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def randn_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randn_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randn_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randperm[T, TT <: TensorType](@Cast(Array("int64_t")) n: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randperm(@Cast(Array("int64_t")) n: CLongPointer): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByVal def randperm[T, TT <: TensorType](@Cast(Array("int64_t")) n: CLongPointer, @C10Optional generator: Generator, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def randperm(@Cast(Array("int64_t")) n: CLongPointer, @C10Optional generator: Generator): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def randperm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def randperm_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def randperm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def range_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @ByVal step: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def range_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def range_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T], @ByVal step: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def range_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal start: Scalar[T], @ByVal end: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reciprocal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reciprocal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reciprocal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def neg[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def neg_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def neg_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def neg_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def neg_out_sparse[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def negative[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def negative_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def negative_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal repeats: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave_cpu[T, TT <: TensorType](@Const @ByRef repeats: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave_cuda[T, TT <: TensorType](@Const @ByRef repeats: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef repeats: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef repeats: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef repeats: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef repeats: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) repeats: CLongPointer, @Cast(Array("int64_t*")) @C10Optional dim: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) repeats: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) repeats: CLongPointer, @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def repeat_interleave[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) repeats: CLongPointer, @Cast(Array("int64_t*")) @C10Optional dim: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reshape[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal shape: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_reshape[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal shape: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reshape_as[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def round[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def round_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def round_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rrelu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal lower: Scalar[T], @ByVal upper: Scalar[T], @Cast(Array("bool")) training: Boolean, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rrelu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rrelu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal lower: Scalar[T], @ByVal upper: Scalar[T], @Cast(Array("bool")) training: Boolean, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rrelu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def relu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_relu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def relu_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def relu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_relu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def relu_quantized_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def prelu_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def prelu_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def prelu_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def prelu_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def gelu_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gelu_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gelu_backward_cpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gelu_backward_cuda[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def infinitely_differentiable_gelu_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardshrink[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal lambd: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardshrink[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardshrink_backward[T, TT <: TensorType](@Const @ByRef grad_out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal lambd: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rsqrt[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rsqrt_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rsqrt_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def select[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) index: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def select_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal input_sizes: IntArrayRef, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) index: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def selu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def selu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def celu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def celu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def celu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def celu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def silu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def silu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def silu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def silu_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sigmoid[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sigmoid_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_sigmoid[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sigmoid_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_sigmoid_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sigmoid_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional eps: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @C10Optional eps: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @C10Optional eps: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @C10Optional eps: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sin[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sin_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sin_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sinh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sinh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sinh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def detach[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def detach_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slice[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) start: CLongPointer, @Cast(Array("int64_t")) end: CLongPointer, @Cast(Array("int64_t")) step: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slice[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slice_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal input_sizes: IntArrayRef, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) start: CLongPointer, @Cast(Array("int64_t")) end: CLongPointer, @Cast(Array("int64_t")) step: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slogdet[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def smm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unsafe_split[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) split_size: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unsafe_split[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) split_size: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def split[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) split_size: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def split[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) split_size: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unsafe_split_with_sizes[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal split_sizes: IntArrayRef, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unsafe_split_with_sizes[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal split_sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def split_with_sizes[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal split_sizes: IntArrayRef, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def split_with_sizes[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal split_sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def squeeze[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def squeeze[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def squeeze_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def squeeze_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sspaddmm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sspaddmm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_only_sparse[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_only_sparse[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_only_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_only_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _sspaddmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stack[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stack[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def stack_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def stack_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hstack[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hstack_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def vstack[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def vstack_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dstack[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def dstack_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongPointer, @Cast(Array("int64_t*")) @C10Optional win_length: LongPointer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: BoolPointer, @Cast(Array("bool*")) @C10Optional return_complex: BoolPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongBuffer, @Cast(Array("int64_t*")) @C10Optional win_length: LongBuffer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: Array[Boolean], @Cast(Array("bool*")) @C10Optional return_complex: Array[Boolean]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: Array[Long], @Cast(Array("int64_t*")) @C10Optional win_length: Array[Long], @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: BoolPointer, @Cast(Array("bool*")) @C10Optional return_complex: BoolPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongPointer, @Cast(Array("int64_t*")) @C10Optional win_length: LongPointer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: Array[Boolean], @Cast(Array("bool*")) @C10Optional return_complex: Array[Boolean]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongBuffer, @Cast(Array("int64_t*")) @C10Optional win_length: LongBuffer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: BoolPointer, @Cast(Array("bool*")) @C10Optional return_complex: BoolPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def stft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: Array[Long], @Cast(Array("int64_t*")) @C10Optional win_length: Array[Long], @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: Array[Boolean], @Cast(Array("bool*")) @C10Optional return_complex: Array[Boolean]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def istft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongPointer, @Cast(Array("int64_t*")) @C10Optional win_length: LongPointer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) center: Boolean, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: BoolPointer, @Cast(Array("int64_t*")) @C10Optional length: LongPointer, @Cast(Array("bool")) return_complex: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def istft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def istft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongBuffer, @Cast(Array("int64_t*")) @C10Optional win_length: LongBuffer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) center: Boolean, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: Array[Boolean], @Cast(Array("int64_t*")) @C10Optional length: LongBuffer, @Cast(Array("bool")) return_complex: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def istft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: Array[Long], @Cast(Array("int64_t*")) @C10Optional win_length: Array[Long], @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) center: Boolean, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: BoolPointer, @Cast(Array("int64_t*")) @C10Optional length: Array[Long], @Cast(Array("bool")) return_complex: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def istft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongPointer, @Cast(Array("int64_t*")) @C10Optional win_length: LongPointer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) center: Boolean, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: Array[Boolean], @Cast(Array("int64_t*")) @C10Optional length: LongPointer, @Cast(Array("bool")) return_complex: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def istft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: LongBuffer, @Cast(Array("int64_t*")) @C10Optional win_length: LongBuffer, @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) center: Boolean, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: BoolPointer, @Cast(Array("int64_t*")) @C10Optional length: LongBuffer, @Cast(Array("bool")) return_complex: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def istft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n_fft: CLongPointer, @Cast(Array("int64_t*")) @C10Optional hop_length: Array[Long], @Cast(Array("int64_t*")) @C10Optional win_length: Array[Long], @Const @ByRef window: Tensor[T, TT], @Cast(Array("bool")) center: Boolean, @Cast(Array("bool")) normalized: Boolean, @Cast(Array("bool*")) @C10Optional onesided: Array[Boolean], @Cast(Array("int64_t*")) @C10Optional length: Array[Long], @Cast(Array("bool")) return_complex: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nansum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nansum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nansum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nansum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nansum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nansum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sum_to_size[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sqrt[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sqrt_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sqrt_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def square[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def square_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def std[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) unbiased: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def std[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def std[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) unbiased: Boolean, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def std[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def std_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) unbiased: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def std_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def std_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) unbiased: Boolean, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def std_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def std_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) unbiased: Boolean, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def std_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def prod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def prod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def prod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def prod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def prod_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def prod_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def t[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def t_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tan[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tan_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tan_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tanh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tanh_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tanh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tanh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tensordot[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal dims_self: IntArrayRef, @ByVal dims_other: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def threshold[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def threshold_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def threshold_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def threshold_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def threshold__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def threshold_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def threshold_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def threshold_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def threshold_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal threshold: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def transpose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim0: CLongPointer, @Cast(Array("int64_t")) dim1: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_transpose[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim0: CLongPointer, @Cast(Array("int64_t")) dim1: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def transpose_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim0: CLongPointer, @Cast(Array("int64_t")) dim1: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_transpose_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim0: CLongPointer, @Cast(Array("int64_t")) dim1: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def one_hot[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) num_classes: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def one_hot[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def flip_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dims: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def flip_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dims: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fliplr[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def flipud[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def roll_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal shifts: IntArrayRef, @ByVal dims: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def roll_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal shifts: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def roll_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal shifts: IntArrayRef, @ByVal dims: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def roll_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal shifts: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rot90[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer, @ByVal dims: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rot90[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def trapz[T, TT <: TensorType](@Const @ByRef y: Tensor[T, TT], @Const @ByRef x: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def trapz[T, TT <: TensorType](@Const @ByRef y: Tensor[T, TT], @Const @ByRef x: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def trapz[T, TT <: TensorType](@Const @ByRef y: Tensor[T, TT], dx: Double, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def trapz[T, TT <: TensorType](@Const @ByRef y: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _trilinear[T, TT <: TensorType](@Const @ByRef i1: Tensor[T, TT], @Const @ByRef i2: Tensor[T, TT], @Const @ByRef i3: Tensor[T, TT], @ByVal expand1: IntArrayRef, @ByVal expand2: IntArrayRef, @ByVal expand3: IntArrayRef, @ByVal sumdim: IntArrayRef, @Cast(Array("int64_t")) unroll_dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _trilinear[T, TT <: TensorType](@Const @ByRef i1: Tensor[T, TT], @Const @ByRef i2: Tensor[T, TT], @Const @ByRef i3: Tensor[T, TT], @ByVal expand1: IntArrayRef, @ByVal expand2: IntArrayRef, @ByVal expand3: IntArrayRef, @ByVal sumdim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def triplet_margin_loss[T, TT <: TensorType](@Const @ByRef anchor: Tensor[T, TT], @Const @ByRef positive: Tensor[T, TT], @Const @ByRef negative: Tensor[T, TT], margin: Double, p: Double, eps: Double, @Cast(Array("bool")) swap: Boolean, @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def triplet_margin_loss[T, TT <: TensorType](@Const @ByRef anchor: Tensor[T, TT], @Const @ByRef positive: Tensor[T, TT], @Const @ByRef negative: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def trunc[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def trunc_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def trunc_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fix[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fix_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fix_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def type_as[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def _has_compatible_shallow_copy_type[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef from: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByVal def _unique_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) sorted: Boolean, @Cast(Array("bool")) return_inverse: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _unique_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _unique_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) sorted: Boolean, @Cast(Array("bool")) return_inverse: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _unique_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) sorted: Boolean, @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) sorted: Boolean, @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean, @Cast(Array("int64_t*")) @C10Optional dim: LongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean, @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean, @Cast(Array("int64_t*")) @C10Optional dim: Array[Long]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean, @Cast(Array("int64_t*")) @C10Optional dim: LongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean, @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_consecutive_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean, @Cast(Array("int64_t*")) @C10Optional dim: Array[Long]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_consecutive_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_consecutive_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_consecutive_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def unique_dim_consecutive_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _unique2_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) sorted: Boolean, @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _unique2_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _unique2_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) sorted: Boolean, @Cast(Array("bool")) return_inverse: Boolean, @Cast(Array("bool")) return_counts: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _unique2_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _unsafe_view[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def unsqueeze[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def unsqueeze_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def vander[T, TT <: TensorType](@Const @ByRef x: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional N: LongPointer, @Cast(Array("bool")) increasing: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def vander[T, TT <: TensorType](@Const @ByRef x: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def vander[T, TT <: TensorType](@Const @ByRef x: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional N: LongBuffer, @Cast(Array("bool")) increasing: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def vander[T, TT <: TensorType](@Const @ByRef x: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional N: Array[Long], @Cast(Array("bool")) increasing: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def `var`[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) unbiased: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def `var`[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def `var`[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) unbiased: Boolean, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def `var`[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def var_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) unbiased: Boolean, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def var_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def var_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) unbiased: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def var_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def var_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) unbiased: Boolean, @Cast(Array("bool")) keepdim: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def var_mean[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def view_as[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def where[T, TT <: TensorType](@Const @ByRef condition: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def where[T, TT <: TensorType](@Const @ByRef condition: Tensor[T, TT], @ByVal self: Scalar[T], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def where[T, TT <: TensorType](@Const @ByRef condition: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def where[T, TT <: TensorType](@Const @ByRef condition: Tensor[T, TT], @ByVal self: Scalar[T], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def where[T, TT <: TensorType](@Const @ByRef condition: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_where[T, TT <: TensorType](@Const @ByRef condition: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm_except_dim[T, TT <: TensorType](@Const @ByRef v: Tensor[T, TT], @Cast(Array("int64_t")) pow: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm_except_dim[T, TT <: TensorType](@Const @ByRef v: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _weight_norm[T, TT <: TensorType](@Const @ByRef v: Tensor[T, TT], @Const @ByRef g: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _weight_norm[T, TT <: TensorType](@Const @ByRef v: Tensor[T, TT], @Const @ByRef g: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def weight_norm_cuda[T, TT <: TensorType](@Const @ByRef v: Tensor[T, TT], @Const @ByRef g: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def weight_norm_cuda[T, TT <: TensorType](@Const @ByRef v: Tensor[T, TT], @Const @ByRef g: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def weight_norm_cuda_backward[T, TT <: TensorType](@Const @ByRef grad_w: Tensor[T, TT], @Const @ByRef saved_v: Tensor[T, TT], @Const @ByRef saved_g: Tensor[T, TT], @Const @ByRef saved_norms: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _weight_norm_differentiable_backward[T, TT <: TensorType](@Const @ByRef grad_w: Tensor[T, TT], @Const @ByRef saved_v: Tensor[T, TT], @Const @ByRef saved_g: Tensor[T, TT], @Const @ByRef saved_norms: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def zeros[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def zeros(@ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def zeros_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def zeros_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def zeros_like[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _standard_gamma_grad_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _standard_gamma_grad_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_gamma_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_gamma_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_gamma_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_gamma_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _dirichlet_grad_cpu[T, TT <: TensorType](@Const @ByRef x: Tensor[T, TT], @Const @ByRef alpha: Tensor[T, TT], @Const @ByRef total: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _dirichlet_grad_cuda[T, TT <: TensorType](@Const @ByRef x: Tensor[T, TT], @Const @ByRef alpha: Tensor[T, TT], @Const @ByRef total: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_dirichlet_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_dirichlet_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_dirichlet_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_dirichlet_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_poisson_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_poisson_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_poisson_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_poisson_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_binomial_cpu[T, TT <: TensorType](@Const @ByRef count: Tensor[T, TT], @Const @ByRef prob: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_binomial_cpu[T, TT <: TensorType](@Const @ByRef count: Tensor[T, TT], @Const @ByRef prob: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_binomial_cuda[T, TT <: TensorType](@Const @ByRef count: Tensor[T, TT], @Const @ByRef prob: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _s_binomial_cuda[T, TT <: TensorType](@Const @ByRef count: Tensor[T, TT], @Const @ByRef prob: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal p: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_sum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_sum_backward_cpu[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_sum_backward_cuda[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_sparse_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_sparse_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_backward_sparse_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softmax_backward_sparse_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_log_softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_log_softmax[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_sparse_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_sparse_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) half_to_float: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_backward_sparse_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_softmax_backward_sparse_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal p: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional p: Scalar[T], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def frobenius_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def frobenius_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def frobenius_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def frobenius_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def frobenius_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nuclear_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nuclear_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nuclear_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nuclear_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nuclear_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nuclear_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nuclear_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nuclear_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal dim: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clone[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clone[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clone_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def clone_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_clone[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_clone[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_clone[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_clone[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def resize_as_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef the_template: Tensor[T, TT], @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def resize_as_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef the_template: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def zero_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def zero_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_zero_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_out_sparse[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_out_sparse[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sub_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sub_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sub_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def subtract_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def subtract_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def subtract[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def subtract[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def subtract_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def subtract_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def subtract[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def subtract[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def subtract_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def subtract_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rsub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rsub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def heaviside_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef values: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def heaviside[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef values: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def heaviside_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef values: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rsub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rsub[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_addmm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef sparse: Tensor[T, TT], @Const @ByRef dense: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_addmm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef sparse: Tensor[T, TT], @Const @ByRef dense: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_out_sparse_dense_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_out_sparse_dense_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_out_sparse_dense_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_out_sparse_dense_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_sparse_dense_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_sparse_dense_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_sparse_dense_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addmm_sparse_dense_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addmm__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def s_addmm_sparse_dense_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def s_addmm_sparse_dense_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def s_addmm_sparse_dense_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def s_addmm_sparse_dense_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_coo_tensor[T, TT <: TensorType](@ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_coo_tensor[TT <: TensorType, T](@Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_coo_tensor[TT <: TensorType, T](@Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_coo_tensor[TT <: TensorType, T](@Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT], @ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_coo_tensor[TT <: TensorType, T](@Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_coo_tensor_unsafe[TT <: TensorType, T](@Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT], @ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _sparse_coo_tensor_unsafe[TT <: TensorType, T](@Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") def _validate_sparse_coo_tensor_args[TT <: TensorType, T](@Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT], @ByVal size: IntArrayRef): Unit
	@native @Namespace("at::native") @ByVal def new_with_dims_sparse[T, TT <: TensorType](@Cast(Array("int64_t")) sparse_dim: CLongPointer, @Cast(Array("int64_t")) dense_dim: CLongPointer, @ByVal size: IntArrayRef, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def new_with_dims_and_tensor_sparse[T, TT <: TensorType](@Cast(Array("int64_t")) sparse_dim: CLongPointer, @Cast(Array("int64_t")) dense_dim: CLongPointer, @ByVal size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT], @Const @ByRef values: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sparse_resize_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @Cast(Array("int64_t")) sparse_dim: CLongPointer, @Cast(Array("int64_t")) dense_dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sparse_resize_and_clear_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef, @Cast(Array("int64_t")) sparse_dim: CLongPointer, @Cast(Array("int64_t")) dense_dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_mask_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_mask_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sparse_to_dense[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_to_dense[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to_dense_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("int64_t")) def sparse_dim_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): CLongPointer
	@native @Namespace("at::native") @Cast(Array("int64_t")) def dense_dim_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): CLongPointer
	@native @Namespace("at::native") @Cast(Array("int64_t")) def _nnz_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): CLongPointer
	@native @Namespace("at::native") @ByVal def coalesce_sparse_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def coalesce_sparse_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def is_coalesced_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByVal def _indices_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def _values_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _coalesced_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("bool")) coalesced: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def indices_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def values_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hspmm_out_sparse_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hspmm_out_sparse_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hspmm_sparse_cpu[T, TT <: TensorType](@Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hspmm_sparse_cuda[T, TT <: TensorType](@Const @ByRef mat1: Tensor[T, TT], @Const @ByRef mat2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def copy_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef src: Tensor[T, TT], @Cast(Array("bool")) non_blocking: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def copy_sparse_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef src: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unbind[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def unbind[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dense_to_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) sparse_dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dense_to_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dense_to_mkldnn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_reorder_conv2d_weight[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_reorder_conv2d_weight[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_reorder_conv3d_weight[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("int64_t")) groups: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_reorder_conv3d_weight[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to_mkldnn_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantize_per_tensor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], scale: Double, @Cast(Array("int64_t")) zero_point: CLongPointer, @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def quantize_per_tensor_list_cpu[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @Const @ByRef scales: Tensor[T, TT], @Const @ByRef zero_points: Tensor[T, TT], @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantize_per_channel_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef scales: Tensor[T, TT], @Const @ByRef zero_points: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer, @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dequantize_quant[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def dequantize_tensors_quantized_cpu[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def q_scale_quant[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Double
	@native @Namespace("at::native") @Cast(Array("int64_t")) def q_zero_point_quant[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): CLongPointer
	@native @Namespace("at::native") @ByVal def q_per_channel_scales[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def q_per_channel_zero_points[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("int64_t")) def q_per_channel_axis[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): CLongPointer
	@native @Namespace("at::native") @ByVal def int_repr_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def int_repr_quantized_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def make_per_tensor_quantized_tensor_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], scale: Double, @Cast(Array("int64_t")) zero_point: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def make_per_tensor_quantized_tensor_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], scale: Double, @Cast(Array("int64_t")) zero_point: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def make_per_channel_quantized_tensor_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef scale: Tensor[T, TT], @Const @ByRef zero_point: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def qscheme_quant[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): QScheme
	@native @Namespace("at::native") @ByVal def fake_quantize_per_tensor_affine[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], scale: Double, @Cast(Array("int64_t")) zero_point: CLongPointer, @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fake_quantize_per_tensor_affine_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], scale: Double, @Cast(Array("int64_t")) zero_point: CLongPointer, @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _fake_quantize_learnable_per_tensor_affine[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef scale: Tensor[T, TT], @Const @ByRef zero_point: Tensor[T, TT], @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _fake_quantize_learnable_per_tensor_affine_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef scale: Tensor[T, TT], @Const @ByRef zero_point: Tensor[T, TT], @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def fake_quantize_per_channel_affine[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef scale: Tensor[T, TT], @Const @ByRef zero_point: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer, @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fake_quantize_per_channel_affine_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef scale: Tensor[T, TT], @Const @ByRef zero_point: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer, @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _fake_quantize_learnable_per_channel_affine[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef scale: Tensor[T, TT], @Const @ByRef zero_point: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer, @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _fake_quantize_learnable_per_channel_affine_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef scale: Tensor[T, TT], @Const @ByRef zero_point: Tensor[T, TT], @Cast(Array("int64_t")) axis: CLongPointer, @Cast(Array("int64_t")) quant_min: CLongPointer, @Cast(Array("int64_t")) quant_max: CLongPointer): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _choose_qparams_per_tensor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) reduce_range: Boolean): DoubleLong
	@native @Namespace("at::native") @ByVal def _choose_qparams_per_tensor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): DoubleLong
	@native @Namespace("at::native") @ByVal def _saturate_weight_to_fp16[T, TT <: TensorType](@Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def choose_qparams_optimized[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Cast(Array("int64_t")) numel: CLongPointer, @Cast(Array("int64_t")) n_bins: CLongPointer, ratio: Double, @Cast(Array("int64_t")) bit_width: CLongPointer): DoubleDouble
	@native @Namespace("at::native") @ByVal def to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef options: TensorOptions[T, TT], @Cast(Array("bool")) non_blocking: Boolean, @Cast(Array("bool")) copy: Boolean, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal device: Device[TT], @ByVal dtype: ScalarType, @Cast(Array("bool")) non_blocking: Boolean, @Cast(Array("bool")) copy: Boolean, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal device: Device[TT], @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dtype: ScalarType, @Cast(Array("bool")) non_blocking: Boolean, @Cast(Array("bool")) copy: Boolean, @C10Optional memory_format: MemoryFormat): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def meshgrid[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cartesian_prod[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def combinations[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) r: CLongPointer, @Cast(Array("bool")) with_replacement: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def combinations[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def item[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Scalar[T]
	@native @Namespace("at::native") @ByVal def result_type[T, TT <: TensorType](@Const @ByRef tensor: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): ScalarType
	@native @Namespace("at::native") @ByVal def result_type[T, TT <: TensorType](@Const @ByRef tensor: Tensor[T, TT], @ByVal other: Scalar[T]): ScalarType
	@native @Namespace("at::native") @ByVal def result_type[T, TT <: TensorType](@ByVal scalar: Scalar[T], @Const @ByRef tensor: Tensor[T, TT]): ScalarType
	@native @Namespace("at::native") @ByVal def result_type[T](@ByVal scalar1: Scalar[T], @ByVal scalar2: Scalar[T]): ScalarType
	@native @Namespace("at::native") @Cast(Array("bool")) def can_cast(@ByVal from: ScalarType, @ByVal to: ScalarType): Boolean
	@native @Namespace("at::native") @ByVal def promote_types(@ByVal type1: ScalarType, @ByVal type2: ScalarType): ScalarType
	@native @Namespace("at::native") @ByVal def _local_scalar_dense_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Scalar[T]
	@native @Namespace("at::native") @ByVal def _local_scalar_dense_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Scalar[T]
	@native @Namespace("at::native") @ByVal def _thnn_fused_lstm_cell_cuda[T, TT <: TensorType](@Const @ByRef input_gates: Tensor[T, TT], @Const @ByRef hidden_gates: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT], @Const @ByRef input_bias: Tensor[T, TT], @Const @ByRef hidden_bias: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _thnn_fused_lstm_cell_cuda[T, TT <: TensorType](@Const @ByRef input_gates: Tensor[T, TT], @Const @ByRef hidden_gates: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _thnn_fused_lstm_cell_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_hy: Tensor[T, TT], @Const @ByRef grad_cy: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT], @Const @ByRef cy: Tensor[T, TT], @Const @ByRef workspace: Tensor[T, TT], @Cast(Array("bool")) has_bias: Boolean): TensorTuple5[T,TT]
	@native @Namespace("at::native") @ByVal def _thnn_differentiable_lstm_cell_backward[T, TT <: TensorType](@Const @ByRef grad_hy: Tensor[T, TT], @Const @ByRef grad_cy: Tensor[T, TT], @Const @ByRef input_gates: Tensor[T, TT], @Const @ByRef hidden_gates: Tensor[T, TT], @Const @ByRef input_bias: Tensor[T, TT], @Const @ByRef hidden_bias: Tensor[T, TT], @Const @ByRef cx: Tensor[T, TT], @Const @ByRef cy: Tensor[T, TT]): TensorTuple5[T,TT]
	@native @Namespace("at::native") @ByVal def _thnn_fused_gru_cell_cuda[T, TT <: TensorType](@Const @ByRef input_gates: Tensor[T, TT], @Const @ByRef hidden_gates: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef input_bias: Tensor[T, TT], @Const @ByRef hidden_bias: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _thnn_fused_gru_cell_cuda[T, TT <: TensorType](@Const @ByRef input_gates: Tensor[T, TT], @Const @ByRef hidden_gates: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _thnn_fused_gru_cell_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_hy: Tensor[T, TT], @Const @ByRef workspace: Tensor[T, TT], @Cast(Array("bool")) has_bias: Boolean): TensorTuple5[T,TT]
	@native @Namespace("at::native") @ByVal def _thnn_differentiable_gru_cell_backward[T, TT <: TensorType](@Const @ByRef grad_hy: Tensor[T, TT], @Const @ByRef input_gates: Tensor[T, TT], @Const @ByRef hidden_gates: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef input_bias: Tensor[T, TT], @Const @ByRef hidden_bias: Tensor[T, TT]): TensorTuple5[T,TT]
	@native @Namespace("at::native") @ByVal def lstm[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal hx: TensorList[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @Cast(Array("bool")) batch_first: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def lstm[T, TT <: TensorType](@Const @ByRef data: Tensor[T, TT], @Const @ByRef batch_sizes: Tensor[T, TT], @ByVal hx: TensorList[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def gru[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @Cast(Array("bool")) batch_first: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def gru[T, TT <: TensorType](@Const @ByRef data: Tensor[T, TT], @Const @ByRef batch_sizes: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def rnn_tanh[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @Cast(Array("bool")) batch_first: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def rnn_tanh[T, TT <: TensorType](@Const @ByRef data: Tensor[T, TT], @Const @ByRef batch_sizes: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def rnn_relu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean, @Cast(Array("bool")) batch_first: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def rnn_relu[T, TT <: TensorType](@Const @ByRef data: Tensor[T, TT], @Const @ByRef batch_sizes: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @ByVal params: TensorList[T, TT], @Cast(Array("bool")) has_biases: Boolean, @Cast(Array("int64_t")) num_layers: CLongPointer, dropout: Double, @Cast(Array("bool")) train: Boolean, @Cast(Array("bool")) bidirectional: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def lstm_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal hx: TensorList[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def lstm_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal hx: TensorList[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def gru_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gru_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rnn_tanh_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rnn_tanh_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rnn_relu_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rnn_relu_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_lstm_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @ByVal hx: TensorList[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT], @Const @ByRef packed_ih: Tensor[T, TT], @Const @ByRef packed_hh: Tensor[T, TT], @Const @ByRef col_offsets_ih: Tensor[T, TT], @Const @ByRef col_offsets_hh: Tensor[T, TT], @ByVal scale_ih: Scalar[T], @ByVal scale_hh: Scalar[T], @ByVal zero_point_ih: Scalar[T], @ByVal zero_point_hh: Scalar[T]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def quantized_gru_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT], @Const @ByRef packed_ih: Tensor[T, TT], @Const @ByRef packed_hh: Tensor[T, TT], @Const @ByRef col_offsets_ih: Tensor[T, TT], @Const @ByRef col_offsets_hh: Tensor[T, TT], @ByVal scale_ih: Scalar[T], @ByVal scale_hh: Scalar[T], @ByVal zero_point_ih: Scalar[T], @ByVal zero_point_hh: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_rnn_relu_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT], @Const @ByRef packed_ih: Tensor[T, TT], @Const @ByRef packed_hh: Tensor[T, TT], @Const @ByRef col_offsets_ih: Tensor[T, TT], @Const @ByRef col_offsets_hh: Tensor[T, TT], @ByVal scale_ih: Scalar[T], @ByVal scale_hh: Scalar[T], @ByVal zero_point_ih: Scalar[T], @ByVal zero_point_hh: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantized_rnn_tanh_cell[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef hx: Tensor[T, TT], @Const @ByRef w_ih: Tensor[T, TT], @Const @ByRef w_hh: Tensor[T, TT], @Const @ByRef b_ih: Tensor[T, TT], @Const @ByRef b_hh: Tensor[T, TT], @Const @ByRef packed_ih: Tensor[T, TT], @Const @ByRef packed_hh: Tensor[T, TT], @Const @ByRef col_offsets_ih: Tensor[T, TT], @Const @ByRef col_offsets_hh: Tensor[T, TT], @ByVal scale_ih: Scalar[T], @ByVal scale_hh: Scalar[T], @ByVal zero_point_ih: Scalar[T], @ByVal zero_point_hh: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _pack_padded_sequence[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @Const @ByRef lengths: Tensor[T, TT], @Cast(Array("bool")) batch_first: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _pack_padded_sequence_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal input_size: IntArrayRef, @Const @ByRef batch_sizes: Tensor[T, TT], @Cast(Array("bool")) batch_first: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _pad_packed_sequence[T, TT <: TensorType](@Const @ByRef data: Tensor[T, TT], @Const @ByRef batch_sizes: Tensor[T, TT], @Cast(Array("bool")) batch_first: Boolean, @ByVal padding_value: Scalar[T], @Cast(Array("int64_t")) total_length: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def set_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal source: Storage): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_storage_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal source: Storage, @Cast(Array("int64_t")) storage_offset: CLongPointer, @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_storage_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal source: Storage, @Cast(Array("int64_t")) storage_offset: CLongPointer, @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_storage_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal source: Storage, @Cast(Array("int64_t")) storage_offset: CLongPointer, @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_storage_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal source: Storage, @Cast(Array("int64_t")) storage_offset: CLongPointer, @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_storage_quantized_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal source: Storage, @Cast(Array("int64_t")) storage_offset: CLongPointer, @ByVal size: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_storage_quantized_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal source: Storage, @Cast(Array("int64_t")) storage_offset: CLongPointer, @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_tensor_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def set_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def is_set_to[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByRef def masked_fill__cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def masked_fill__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def masked_fill[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def masked_fill__cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @Const @ByRef value: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def masked_fill__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @Const @ByRef value: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def masked_fill[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @Const @ByRef value: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def masked_scatter__cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def masked_scatter__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def masked_scatter[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def view[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_view[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_add_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_add_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef source: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_fill[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_fill_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef value: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_fill[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef value: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def scatter_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef src: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def scatter[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef src: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def scatter_fill_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def scatter[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def scatter_reduce_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef src: Tensor[T, TT], @StdString reduce: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def scatter_reduce_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef src: Tensor[T, TT], @StdString reduce: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def scatter_scalar_reduce_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @ByVal value: Scalar[T], @StdString reduce: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def scatter_scalar_reduce_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @ByVal value: Scalar[T], @StdString reduce: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def scatter_add_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef src: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def scatter_add[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef src: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eq_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eq_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_and_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_and_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bitwise_and[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bitwise_and[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_and_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_and_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __and__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __and__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __iand__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __iand__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_or_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_or_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bitwise_or[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bitwise_or[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_or_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_or_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __or__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __or__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __ior__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __ior__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_xor_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_xor_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bitwise_xor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bitwise_xor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_xor_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bitwise_xor_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __xor__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __xor__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __ixor__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __ixor__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __lshift__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __lshift__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __ilshift__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __ilshift__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __rshift__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def __rshift__[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __irshift__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def __irshift__[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _lgamma__cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _lgamma__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def atan2_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def digamma_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def polygamma_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def pow_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal exponent: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def pow_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef exponent: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cpu_scalar_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @ByVal weight: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cuda_scalar_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @ByVal weight: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cpu_tensor_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cuda_tensor_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def remainder_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def remainder_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addbmm_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addbmm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addbmm_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addbmm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addbmm_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef batch1: Tensor[T, TT], @Const @ByRef batch2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcdiv_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcdiv_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) from: CLongPointer, @Cast(Array("int64_t*")) @C10Optional to: LongPointer, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) from: CLongPointer, @Cast(Array("int64_t*")) @C10Optional to: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) from: CLongPointer, @Cast(Array("int64_t*")) @C10Optional to: LongBuffer, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) from: CLongPointer, @Cast(Array("int64_t*")) @C10Optional to: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) from: CLongPointer, @Cast(Array("int64_t*")) @C10Optional to: Array[Long], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) from: CLongPointer, @Cast(Array("int64_t*")) @C10Optional to: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) to: CLongPointer, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) to: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def random_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def uniform_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], from: Double, to: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def uniform_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cauchy_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], median: Double, sigma: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cauchy_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log_normal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], mean: Double, std: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log_normal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def exponential_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], lambd: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def exponential_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def geometric_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], p: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def geometric_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], p: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def diag_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def diag_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def diag_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def diag_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diag[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diag[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def diag_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal input_sizes: IntArrayRef, @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cross_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cross_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cross_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cross_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cross[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cross[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cross[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cross[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def triu_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def triu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def triu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tril_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tril[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) diagonal: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tril[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tril_indices_cpu[T, TT <: TensorType](@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer, @Cast(Array("int64_t")) offset: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def tril_indices_cpu(@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer): Tensor[Long, CPU]
	@native @Namespace("at::native") @ByVal def tril_indices_cuda[T, TT <: TensorType](@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer, @Cast(Array("int64_t")) offset: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def tril_indices_cuda(@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer): Tensor[Long, CPU]
	@native @Namespace("at::native") @ByVal def triu_indices_cpu[T, TT <: TensorType](@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer, @Cast(Array("int64_t")) offset: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def triu_indices_cpu(@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer): Tensor[Long, CPU]
	@native @Namespace("at::native") @ByVal def triu_indices_cuda[T, TT <: TensorType](@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer, @Cast(Array("int64_t")) offset: CLongPointer, @Const @ByRef options: TensorOptions[T, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def triu_indices_cuda(@Cast(Array("int64_t")) row: CLongPointer, @Cast(Array("int64_t")) col: CLongPointer): Tensor[Long, CPU]
	@native @Namespace("at::native") @ByVal def trace_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def trace_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal sizes: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ne_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ne_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ne[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ne_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ne_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ne_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ne[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ne_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ne_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ne_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def not_equal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def not_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def not_equal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def not_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def not_equal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def not_equal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eq_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eq_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def eq[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def eq_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eq_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def eq_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def eq[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def eq_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ge_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ge_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ge[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ge_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ge_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ge_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ge[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ge_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ge_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ge_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_equal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def greater_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_equal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def greater_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_equal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_equal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def le_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def le_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def le[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def le_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def le_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def le_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def le[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def le_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def le_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def le_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_equal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def less_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_equal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def less_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_equal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_equal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gt_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gt_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gt[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gt_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gt_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gt_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gt[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gt_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gt_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gt_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def greater[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def greater[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def greater_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lt_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lt_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lt[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lt_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lt_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lt_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lt[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lt_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lt_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lt_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def less[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def less[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def less_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def take_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_select_out_cpu_[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def index_select_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_select_cpu_[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_select_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_select_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def index_select_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @ByVal self_sizes: IntArrayRef, @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def masked_select_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def masked_select_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def masked_select_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def masked_select_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def masked_select_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef input: Tensor[T, TT], @Const @ByRef mask: Tensor[Byte, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nonzero_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nonzero_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def nonzero_numpy[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gather_out_cpu_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Cast(Array("bool")) sparse_grad: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def gather_out_cpu_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gather[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Cast(Array("bool")) sparse_grad: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gather[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def gather_backward[T, TT <: TensorType](@Const @ByRef grad: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Cast(Array("bool")) sparse_grad: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _gather_sparse_backward[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Const @ByRef index: Tensor[Long, TT], @Const @ByRef grad: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcmul_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcmul_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addcmul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addcmul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcmul_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcmul_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcdiv_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def addcdiv_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addcdiv[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def addcdiv[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef tensor1: Tensor[T, TT], @Const @ByRef tensor2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def triangular_solve_out[T, TT <: TensorType](@ByRef X: Tensor[T, TT], @ByRef M: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean, @Cast(Array("bool")) transpose: Boolean, @Cast(Array("bool")) unitriangular: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def triangular_solve_out[T, TT <: TensorType](@ByRef X: Tensor[T, TT], @ByRef M: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def triangular_solve[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean, @Cast(Array("bool")) transpose: Boolean, @Cast(Array("bool")) unitriangular: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def triangular_solve[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _triangular_solve_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean, @Cast(Array("bool")) transpose: Boolean, @Cast(Array("bool")) unitriangular: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _triangular_solve_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean, @Cast(Array("bool")) transpose: Boolean, @Cast(Array("bool")) unitriangular: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def symeig_out[T, TT <: TensorType](@ByRef e: Tensor[T, TT], @ByRef V: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) eigenvectors: Boolean, @Cast(Array("bool")) upper: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def symeig_out[T, TT <: TensorType](@ByRef e: Tensor[T, TT], @ByRef V: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def symeig[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) eigenvectors: Boolean, @Cast(Array("bool")) upper: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def symeig[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _symeig_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) eigenvectors: Boolean, @Cast(Array("bool")) upper: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _symeig_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) eigenvectors: Boolean, @Cast(Array("bool")) upper: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def svd_out[T, TT <: TensorType](@ByRef U: Tensor[T, TT], @ByRef S: Tensor[T, TT], @ByRef V: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean, @Cast(Array("bool")) compute_uv: Boolean): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def svd_out[T, TT <: TensorType](@ByRef U: Tensor[T, TT], @ByRef S: Tensor[T, TT], @ByRef V: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def svd[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean, @Cast(Array("bool")) compute_uv: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def svd[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _svd_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean, @Cast(Array("bool")) compute_uv: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _svd_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean, @Cast(Array("bool")) compute_uv: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByRef def cholesky_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cholesky_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cholesky[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cholesky[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cholesky_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cholesky_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cholesky_solve_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cholesky_solve_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cholesky_solve[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cholesky_solve[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef input2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cholesky_solve_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cholesky_solve_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT], @Cast(Array("bool")) upper: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def solve[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def solve_out[T, TT <: TensorType](@ByRef solution: Tensor[T, TT], @ByRef lu: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _solve_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _solve_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef A: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def qr_out[T, TT <: TensorType](@ByRef Q: Tensor[T, TT], @ByRef R: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def qr_out[T, TT <: TensorType](@ByRef Q: Tensor[T, TT], @ByRef R: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def qr[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def qr[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _qr_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _qr_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) some: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def _lu_with_info_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) pivot: Boolean, @Cast(Array("bool")) check_errors: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _lu_with_info_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _lu_with_info_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) pivot: Boolean, @Cast(Array("bool")) check_errors: Boolean): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def _lu_with_info_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByRef def lu_solve_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef LU_data: Tensor[T, TT], @Const @ByRef LU_pivots: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lu_solve[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef LU_data: Tensor[T, TT], @Const @ByRef LU_pivots: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _lu_solve_helper_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef LU_data: Tensor[T, TT], @Const @ByRef LU_pivots: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _lu_solve_helper_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef LU_data: Tensor[T, TT], @Const @ByRef LU_pivots: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multinomial_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) num_samples: CLongPointer, @Cast(Array("bool")) replacement: Boolean, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multinomial_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) num_samples: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multinomial[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) num_samples: CLongPointer, @Cast(Array("bool")) replacement: Boolean, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multinomial[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) num_samples: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _lgamma_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _lgamma_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lgamma[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def digamma_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def digamma[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def polygamma_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Cast(Array("int64_t")) n: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def polygamma[T, TT <: TensorType](@Cast(Array("int64_t")) n: CLongPointer, @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def erfinv[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _erfinv__cpu[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _erfinv__cuda[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _erfinv_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _erfinv_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def i0[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def i0_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def i0_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sign[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sign_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sign_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def signbit[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def signbit_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dist[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal p: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def dist[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def atan2_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def atan2[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cpu_scalar_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @ByVal weight: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cuda_scalar_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @ByVal weight: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cpu_tensor_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def lerp_cuda_tensor_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lerp_cpu_scalar[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @ByVal weight: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lerp_cuda_scalar[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @ByVal weight: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lerp_cpu_tensor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def lerp_cuda_tensor[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef end: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _histc_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) bins: CLongPointer, @ByVal min: Scalar[T], @ByVal max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _histc_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _histc_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) bins: CLongPointer, @ByVal min: Scalar[T], @ByVal max: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _histc_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fmod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fmod_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fmod_cuda_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fmod[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fmod_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hypot_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hypot[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hypot_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nextafter_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nextafter[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nextafter_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def remainder_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def remainder[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal other: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def remainder_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def remainder[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def min[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def min_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def maximum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def maximum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def minimum[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def minimum_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def min_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def min[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def median_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def median_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def quantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def quantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], q: Double, @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nanquantile_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongPointer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: LongBuffer, @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nanquantile[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef q: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional dim: Array[Long], @Cast(Array("bool")) keepdim: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sort_out_cpu[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) descending: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def sort_out_cpu[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def sort_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) descending: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def sort_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def sort_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) descending: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def sort_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def argsort[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) descending: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def argsort[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def topk_out_cpu[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) largest: Boolean, @Cast(Array("bool")) sorted: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def topk_out_cpu[T, TT <: TensorType](@ByRef values: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def topk[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) largest: Boolean, @Cast(Array("bool")) sorted: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def topk[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def topk_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("bool")) largest: Boolean, @Cast(Array("bool")) sorted: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def topk_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) k: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def all[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def any[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def any_sparse[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def unfold[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dimension: CLongPointer, @Cast(Array("int64_t")) size: CLongPointer, @Cast(Array("int64_t")) step: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def unfold_backward[T, TT <: TensorType](@Const @ByRef grad_in: Tensor[T, TT], @ByVal input_sizes: IntArrayRef, @Cast(Array("int64_t")) dim: CLongPointer, @Cast(Array("int64_t")) size: CLongPointer, @Cast(Array("int64_t")) step: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @Cast(Array("bool")) def cpu_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def cuda_equal[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @Cast(Array("bool")) def equal_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Boolean
	@native @Namespace("at::native") @ByRef def pow_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef exponent: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pow[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef exponent: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def pow_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal self: Scalar[T], @Const @ByRef exponent: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pow[T, TT <: TensorType](@ByVal self: Scalar[T], @Const @ByRef exponent: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def pow_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal exponent: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def pow_out_sparse_scalar[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal exponent: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pow[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal exponent: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def pow_sparse_scalar[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal exponent: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], mean: Double, std: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], std: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal[T, TT <: TensorType](@Const @ByRef mean: Tensor[T, TT], std: Double, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal[T, TT <: TensorType](@Const @ByRef mean: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], mean: Double, @Const @ByRef std: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], mean: Double, @Const @ByRef std: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal[T, TT <: TensorType](mean: Double, @Const @ByRef std: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal[T, TT <: TensorType](mean: Double, @Const @ByRef std: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef std: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef mean: Tensor[T, TT], @Const @ByRef std: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal[T, TT <: TensorType](@Const @ByRef mean: Tensor[T, TT], @Const @ByRef std: Tensor[T, TT], @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal[T, TT <: TensorType](@Const @ByRef mean: Tensor[T, TT], @Const @ByRef std: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal[T, TT <: TensorType](mean: Double, std: Double, @ByVal size: IntArrayRef, @C10Optional generator: Generator, @Const @ByRef options: TensorOptions[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def normal(mean: Double, std: Double, @ByVal size: IntArrayRef): Tensor[Double, CPU]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], mean: Double, std: Double, @ByVal size: IntArrayRef, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def normal_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], mean: Double, std: Double, @ByVal size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def alias[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cumsum_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cumsum_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _cumsum_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _cumsum_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cumprod_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cumprod_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _cumprod_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _cumprod_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") def _amp_non_finite_check_and_unscale_cuda_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByRef found_inf: Tensor[T, TT], @Const @ByRef inv_scale: Tensor[T, TT]): Unit
	@native @Namespace("at::native") @ByVal def _amp_update_scale_cuda[T, TT <: TensorType](@ByRef growth_tracker: Tensor[T, TT], @Const @ByRef current_scale: Tensor[T, TT], @Const @ByRef found_inf: Tensor[T, TT], scale_growth_factor: Double, scale_backoff_factor: Double, @Cast(Array("int64_t")) growth_interval: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cat_cpu[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _cat_cpu[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cat_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cat_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cat_quantized_cpu[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def cat_quantized_cpu[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _cat_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def _cat_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cat_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cat_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cat_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def cat_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_scalar_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_scalar_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_add_scalar_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_add_scalar_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_scalar_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_scalar_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_sub_scalar_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_sub_scalar_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_mul_scalar_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_mul_scalar_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_mul_scalar_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_mul_scalar_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_div_scalar_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_div_scalar_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalar: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_div_scalar_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_div_scalar_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalar: Scalar[T]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_list_kernel_slow[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_list_kernel_slow[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_list_kernel_cuda[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_list_kernel_cuda[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_add_list_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT], @ByVal alpha: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_add_list_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_add_list_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT], @ByVal alpha: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_add_list_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_list_kernel_slow[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_list_kernel_slow[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_list_kernel_cuda[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_list_kernel_cuda[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_sub_list_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT], @ByVal alpha: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_sub_list_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_sub_list_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT], @ByVal alpha: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_sub_list_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_mul_list_kernel_slow[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_mul_list_kernel_cuda[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_mul_list_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_mul_list_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_div_list_kernel_slow[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_div_list_kernel_cuda[T, TT <: TensorType](@ByVal tensors1: TensorList[T, TT], @ByVal tensors2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_div_list_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_div_list_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal other: TensorList[T, TT]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_scalarlist_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_add_scalarlist_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_add_scalarlist_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") def foreach_tensor_add_scalarlist_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_scalarlist_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_sub_scalarlist_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_sub_scalarlist_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") def foreach_tensor_sub_scalarlist_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_div_scalarlist_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_div_scalarlist_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_div_scalarlist_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") def foreach_tensor_div_scalarlist_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_mul_scalarlist_kernel_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_mul_scalarlist_kernel_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_mul_scalarlist_kernel_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") def foreach_tensor_mul_scalarlist_kernel_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal scalars: ArrayRefDouble): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_exp_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_exp_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_exp_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_exp_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_sqrt_slow[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_sqrt_cuda[T, TT <: TensorType](@ByVal tensors: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") def foreach_tensor_sqrt_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_sqrt_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcdiv_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcdiv_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcdiv_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcdiv_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcmul_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcmul_slow_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcmul_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Unit
	@native @Namespace("at::native") def foreach_tensor_addcmul_cuda_[T, TT <: TensorType](@ByVal self: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Unit
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcdiv_slow[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcdiv_slow[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcdiv_cuda[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcdiv_cuda[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcmul_slow[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcmul_slow[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcmul_cuda[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT], @ByVal value: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @StdVector def foreach_tensor_addcmul_cuda[T, TT <: TensorType](@ByVal input: TensorList[T, TT], @ByVal tensor1: TensorList[T, TT], @ByVal tensor2: TensorList[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bucketize_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bucketize_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bucketize_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def bucketize_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef boundaries: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cpu[T, TT <: TensorType](@ByVal self: Scalar[T], @Const @ByRef boundaries: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cpu[T, TT <: TensorType](@ByVal self: Scalar[T], @Const @ByRef boundaries: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cuda[T, TT <: TensorType](@ByVal self: Scalar[T], @Const @ByRef boundaries: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def bucketize_cuda[T, TT <: TensorType](@ByVal self: Scalar[T], @Const @ByRef boundaries: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cpu[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cpu[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cuda[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cuda[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def searchsorted_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def searchsorted_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def searchsorted_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def searchsorted_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef sorted_sequence: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cpu[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @ByVal self: Scalar[T], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cpu[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @ByVal self: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cuda[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @ByVal self: Scalar[T], @Cast(Array("bool")) out_int32: Boolean, @Cast(Array("bool")) right: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def searchsorted_cuda[T, TT <: TensorType](@Const @ByRef sorted_sequence: Tensor[T, TT], @ByVal self: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mse_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mse_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mse_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mse_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mse_loss_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mse_loss_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def l1_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def l1_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def l1_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def l1_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def l1_loss_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def l1_loss_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multi_margin_loss_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @ByVal p: Scalar[T], @ByVal margin: Scalar[T], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multi_margin_loss_cpu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multi_margin_loss_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @ByVal p: Scalar[T], @ByVal margin: Scalar[T], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multi_margin_loss_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multi_margin_loss_cpu_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @ByVal p: Scalar[T], @ByVal margin: Scalar[T], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multi_margin_loss_cpu_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @ByVal p: Scalar[T], @ByVal margin: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multi_margin_loss_cpu_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @ByVal p: Scalar[T], @ByVal margin: Scalar[T], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multi_margin_loss_cpu_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @ByVal p: Scalar[T], @ByVal margin: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multilabel_margin_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def multilabel_margin_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multilabel_margin_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multilabel_margin_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multilabel_margin_loss_forward_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef is_target: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def multilabel_margin_loss_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def multilabel_margin_loss_backward_cpu_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Const @ByRef is_target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def multilabel_margin_loss_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Const @ByRef is_target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nll_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nll_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss_forward_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef total_weight: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def nll_loss_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def nll_loss_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer, @Const @ByRef total_weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer, @Const @ByRef total_weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nll_loss2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def nll_loss2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss2d_forward_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef total_weight: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def nll_loss2d_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def nll_loss2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer, @Const @ByRef total_weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def nll_loss2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, @Cast(Array("int64_t")) ignore_index: CLongPointer, @Const @ByRef total_weight: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def smooth_l1_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, beta: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def smooth_l1_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def smooth_l1_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, beta: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def smooth_l1_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def smooth_l1_loss_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, beta: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def smooth_l1_loss_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer, beta: Double): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def soft_margin_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def soft_margin_loss_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def soft_margin_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def soft_margin_loss[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def soft_margin_loss_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def soft_margin_loss_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef target: Tensor[T, TT], @Cast(Array("int64_t")) reduction: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def elu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal alpha: Scalar[T], @ByVal scale: Scalar[T], @ByVal input_scale: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def elu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def elu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal alpha: Scalar[T], @ByVal scale: Scalar[T], @ByVal input_scale: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def elu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def elu_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal alpha: Scalar[T], @ByVal scale: Scalar[T], @ByVal input_scale: Scalar[T], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def elu_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal alpha: Scalar[T], @ByVal scale: Scalar[T], @ByVal input_scale: Scalar[T], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def elu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal alpha: Scalar[T], @ByVal scale: Scalar[T], @ByVal input_scale: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def elu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def glu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def glu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def glu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def glu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def glu_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def glu_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardsigmoid_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardsigmoid[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardsigmoid_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardsigmoid_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardsigmoid_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardtanh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardtanh[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardtanh_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardtanh_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardtanh_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_quantized_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal min_val: Scalar[T], @ByVal max_val: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardtanh_quantized_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardswish_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardswish[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def hardswish_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def hardswish_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal negative_slope: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal negative_slope: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def leaky_relu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal negative_slope: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def leaky_relu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def heaky_relu_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal negative_slope: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def heaky_relu_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def leaky_relu_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal negative_slope: Scalar[T], @Cast(Array("bool")) self_is_result: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal negative_slope: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_quantized_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @ByVal negative_slope: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def leaky_relu_quantized_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def log_sigmoid_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_sigmoid[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_sigmoid_forward_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef buffer: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def log_sigmoid_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def log_sigmoid_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef buffer: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def log_sigmoid_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef buffer: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rrelu_with_noise_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef noise: Tensor[T, TT], @ByVal lower: Scalar[T], @ByVal upper: Scalar[T], @Cast(Array("bool")) training: Boolean, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rrelu_with_noise_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef noise: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rrelu_with_noise_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef noise: Tensor[T, TT], @ByVal lower: Scalar[T], @ByVal upper: Scalar[T], @Cast(Array("bool")) training: Boolean, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rrelu_with_noise_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef noise: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def rrelu_with_noise_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef noise: Tensor[T, TT], @ByVal lower: Scalar[T], @ByVal upper: Scalar[T], @Cast(Array("bool")) training: Boolean, @Cast(Array("bool")) self_is_result: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rrelu_with_noise_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef noise: Tensor[T, TT], @ByVal lower: Scalar[T], @ByVal upper: Scalar[T], @Cast(Array("bool")) training: Boolean, @C10Optional generator: Generator): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def rrelu_with_noise_cpu_[T, TT <: TensorType](@ByRef self: Tensor[T, TT], @Const @ByRef noise: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def softplus_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal threshold: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def softplus_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softplus[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal threshold: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softplus[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def softplus_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal threshold: Scalar[T], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softplus_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal beta: Scalar[T], @ByVal threshold: Scalar[T], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def softshrink_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal lambd: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def softshrink_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softshrink[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal lambd: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softshrink[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def softshrink_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal lambd: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def softshrink_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal lambd: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_avg_pool2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_adaptive_avg_pool2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_adaptive_avg_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_avg_pool3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_avg_pool3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_avg_pool3d_out_quantized_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_avg_pool3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_avg_pool3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_avg_pool3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def adaptive_max_pool2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_max_pool2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def adaptive_max_pool3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def adaptive_max_pool3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def adaptive_max_pool3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool3d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool3d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool3d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def mkldnn_avg_pool3d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def mkldnn_avg_pool3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def avg_pool3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: LongBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def avg_pool3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Cast(Array("bool")) count_include_pad: Boolean, @Cast(Array("int64_t*")) @C10Optional divisor_override: Array[Long]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool2d_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool2d_out_cuda[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def fractional_max_pool2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fractional_max_pool2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool3d_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool3d_out_cuda[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef random_samples: Tensor[T, TT]): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def fractional_max_pool3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def fractional_max_pool3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fractional_max_pool3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal output_size: IntArrayRef, @Const @ByRef indices: Tensor[Long, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def max_pool2d_with_indices_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByRef def max_pool2d_with_indices_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def max_pool2d_with_indices_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @ByRef indices: Tensor[Long, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def max_pool3d_with_indices_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByRef def max_pool3d_with_indices_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByVal def max_pool3d_with_indices_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Cast(Array("bool")) ceil_mode: Boolean, @Const @ByRef indices: Tensor[Long, TT]): Tensor[Long, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling2d_forward_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling2d_forward_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling2d_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling2d_forward_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling3d_forward_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling3d_forward_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling3d_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling3d_forward_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def max_unpooling3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def max_unpooling3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef indices: Tensor[Long, TT], @ByVal output_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def reflection_pad2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def reflection_pad2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def replication_pad3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def replication_pad3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cuda[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef input: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @C10Optional output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scale_factors: ArrayRefDouble): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_linear1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_linear1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bilinear2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bilinear2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_bicubic2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_bicubic2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_trilinear3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_trilinear3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @Cast(Array("bool")) align_corners: Boolean, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest1d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest1d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_quantized_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def upsample_nearest3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoublePointer, @C10Optional scales_h: DoublePointer, @C10Optional scales_w: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: DoubleBuffer, @C10Optional scales_h: DoubleBuffer, @C10Optional scales_w: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def upsample_nearest3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal input_size: IntArrayRef, @C10Optional scales_d: Array[Double], @C10Optional scales_h: Array[Double], @C10Optional scales_w: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def sigmoid_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def sigmoid_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def logit_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoublePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: DoubleBuffer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def logit_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional eps: Array[Double]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def tanh_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def tanh_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef output: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose2d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose2d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @ByRef grad_bias: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef columns: Tensor[T, TT], @Const @ByRef ones: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @ByRef grad_bias: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef columns: Tensor[T, TT], @Const @ByRef ones: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef columns: Tensor[T, TT], @Const @ByRef ones: Tensor[T, TT], @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef columns: Tensor[T, TT], @Const @ByRef ones: Tensor[T, TT], @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose3d_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv_transpose3d_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @ByRef grad_bias: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @ByRef grad_bias: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT], @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_transpose3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal output_padding: IntArrayRef, @ByVal dilation: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT], @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByRef def thnn_conv2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def thnn_conv2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def thnn_conv2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def thnn_conv2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv2d_forward_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef finput: Tensor[T, TT], @ByRef fgrad_input: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv2d_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv2d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @ByRef grad_bias: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv2d_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @ByRef grad_bias: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT], @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT], @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByRef def thnn_conv_depthwise2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def thnn_conv_depthwise2d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def thnn_conv_depthwise2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def thnn_conv_depthwise2d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def thnn_conv_depthwise2d_backward_out[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef): TensorRefTuple[T,T,TT]
	@native @Namespace("at::native") @ByVal def thnn_conv_depthwise2d_backward[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal output_mask: ArrayBool2): TensorTuple[T,T,TT]
	@native @Namespace("at::native") @ByRef def slow_conv3d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def slow_conv3d_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv3d[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv3d_forward_out_cpu[T, TT <: TensorType](@ByRef output: Tensor[T, TT], @ByRef finput: Tensor[T, TT], @ByRef fgrad_input: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv3d_forward_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv3d_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @ByRef grad_weight: Tensor[T, TT], @ByRef grad_bias: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT]): TensorRefTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @Const @ByRef finput: Tensor[T, TT], @Const @ByRef fgrad_input: Tensor[T, TT], @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated2d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated2d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated2d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated2d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated3d_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @Const @ByRef bias: Tensor[T, TT], @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated3d_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated3d_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByVal def slow_conv_dilated3d_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef weight: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal stride: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal output_mask: ArrayBool3): TensorTriple[T,T,T,TT]
	@native @Namespace("at::native") @ByRef def col2im_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def col2im_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def col2im_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def col2im_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal output_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def col2im_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def col2im_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def col2im_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def col2im_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def im2col_out_cpu[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def im2col_out_cuda[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def im2col_cpu[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def im2col_cuda[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def im2col_backward_out_cpu[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal input_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def im2col_backward_out_cuda[T, TT <: TensorType](@ByRef grad_input: Tensor[T, TT], @Const @ByRef grad_output: Tensor[T, TT], @ByVal input_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def im2col_backward_cpu[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal input_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def im2col_backward_cuda[T, TT <: TensorType](@Const @ByRef grad_output: Tensor[T, TT], @ByVal input_size: IntArrayRef, @ByVal kernel_size: IntArrayRef, @ByVal dilation: IntArrayRef, @ByVal padding: IntArrayRef, @ByVal stride: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isfinite[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isinf[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isposinf[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def isposinf_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def isneginf[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def isneginf_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _add_batch_dim[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) batch_dim: CLongPointer, @Cast(Array("int64_t")) level: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _remove_batch_dim[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) level: CLongPointer, @Cast(Array("int64_t")) batch_size: CLongPointer, @Cast(Array("int64_t")) out_dim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_hfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_hfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_hfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_hfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_hfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_hfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_hfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ihfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ihfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ihfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ihfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ihfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongPointer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ihfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: LongBuffer, @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ihfft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t*")) @C10Optional n: Array[Long], @Cast(Array("int64_t")) dim: CLongPointer, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_fftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_ifftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_rfftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft_irfftn[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional s: IntArrayRef, @C10Optional dim: IntArrayRef, @StdString @C10Optional norm: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer, @Cast(Array("bool")) normalized: Boolean): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def fft[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Cast(Array("int64_t")) signal_ndim: CLongPointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linalg_det[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def det[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def outer[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def outer_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def ger[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def ger_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @Const @ByRef vec2: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linalg_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @C10Optional ord: Scalar[T], @C10Optional dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linalg_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linalg_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @StdString ord: BytePointer, @C10Optional dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linalg_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @StdString ord: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linalg_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @StdString ord: String, @C10Optional dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def linalg_norm[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @StdString ord: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linalg_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @C10Optional ord: Scalar[T], @C10Optional dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linalg_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linalg_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @StdString ord: BytePointer, @C10Optional dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linalg_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @StdString ord: BytePointer): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linalg_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @StdString ord: String, @C10Optional dim: IntArrayRef, @Cast(Array("bool")) keepdim: Boolean, @C10Optional dtype: ScalarType): Tensor[T, TT]
	@native @Namespace("at::native") @ByRef def linalg_norm_out[T, TT <: TensorType](@ByRef out: Tensor[T, TT], @Const @ByRef self: Tensor[T, TT], @StdString ord: String): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _test_serialization_subcmul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT], @ByVal alpha: Scalar[T]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _test_serialization_subcmul[T, TT <: TensorType](@Const @ByRef self: Tensor[T, TT], @Const @ByRef other: Tensor[T, TT]): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _test_optional_intlist[T, TT <: TensorType](@Const @ByRef values: Tensor[T, TT], @C10Optional addends: IntArrayRef): Tensor[T, TT]
	@native @Namespace("at::native") @ByVal def _test_optional_floatlist[T, TT <: TensorType](@Const @ByRef values: Tensor[T, TT], @C10Optional addends: ArrayRefDouble): Tensor[T, TT]

}
